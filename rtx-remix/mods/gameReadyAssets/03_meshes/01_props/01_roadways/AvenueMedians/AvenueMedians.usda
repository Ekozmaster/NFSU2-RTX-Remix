#usda 1.0
(
    upAxis = "Z"
)

over "RootNode"
{
    over "meshes"
    {
        over "mesh_4949BF8A38775990"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_90BD88457A3E8314"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_C5E68EE698D49CBE"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_347435A17EE95D60"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_8AAE6610E921E410"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Material "ConcreteWalls"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_8AAE6610E921E410/ConcreteWalls/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_8AAE6610E921E410/ConcreteWalls/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_8AAE6610E921E410/ConcreteWalls/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./concrete_foundation_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @./concrete_foundation_normals.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./concrete_foundation_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "Bushes" (
                prepend references = @./CC_MainAvenue_Median02_01_Bushes.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "SmallHedgeFenceInterior"
                {
                    over "Cube_011" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_8AAE6610E921E410/AvenueBushes> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }

                over "SmallHedgeFence"
                {
                    over "Cube" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_8AAE6610E921E410/AvenueBushes> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Material "SidewalkMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_8AAE6610E921E410/SidewalkMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_8AAE6610E921E410/SidewalkMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_8AAE6610E921E410/SidewalkMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./sidewalk_grass_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @./sidewalk_grass_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./sidewalk_grass_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "Sidewalk" (
                prepend references = @./CC_MainAvenue_Median02_01.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "MedianPart1"
                {
                    over "GutterCorner" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_8AAE6610E921E410/SidewalkMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Xform "Walls" (
                prepend references = @./CC_MainAvenue_Median02_01_Walls.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Base_001"
                {
                    over "mesh_878" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_8AAE6610E921E410/ConcreteWalls> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }

                over "Base"
                {
                    over "mesh_001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_8AAE6610E921E410/ConcreteWalls> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Material "AvenueBushes"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_8AAE6610E921E410/AvenueBushes/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_8AAE6610E921E410/AvenueBushes/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_8AAE6610E921E410/AvenueBushes/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    bool inputs:blend_enabled = 1 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Material Flags"
                        displayName = "Blend Enabled"
                        doc = "Indicates if alpha state blending should be enabled."
                        hidden = false
                    )
                    int inputs:blend_type = 0 (
                        customData = {
                            int default = 0
                        }
                        displayGroup = "Material Flags"
                        displayName = "Blend Type"
                        doc = "The alpha state blend type to use."
                        hidden = false
                        renderType = "BlendType"
                        sdrMetadata = {
                            string __SDR__enum_value = "Alpha"
                            string options = "Alpha:0|AlphaEmissive:1|ReverseAlphaEmissive:2|Color:3|ColorEmissive:4|ReverseColorEmissive:5|Emissive:6|Multiplicative:7|DoubleMultiplicative:8"
                        }
                    )
                    asset inputs:diffuse_texture = @./small_bushes_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @./small_bushes_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./small_bushes_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    bool inputs:use_legacy_alpha_state = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Material Flags"
                        displayName = "Use Legacy Alpha State"
                        doc = "Indicates if the alpha state should be derived from legacy information (the drawcall), or specified in the MDL."
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Material "TopFencesMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_8AAE6610E921E410/TopFencesMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_8AAE6610E921E410/TopFencesMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_8AAE6610E921E410/TopFencesMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./cast_iron_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:metallic_constant = 1 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Specular"
                        displayName = "Metallic Amount"
                        doc = "Metallic Material"
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @./cast_iron_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./cast_iron_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "TopFences" (
                prepend references = @./CC_MainAvenue_Median02_01_TopFences.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CC_M02_01_WallsTopFences"
                {
                    over "Cube_014" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_8AAE6610E921E410/TopFencesMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Xform "GrassTop" (
                prepend references = @./CC_MainAvenue_Median02_01_GrassTop.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CC_M02_01_Grass_01"
                {
                    over "mesh_1537" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_8AAE6610E921E410/SidewalkMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Xform "RaphisExcelsaPalms" (
                prepend references = @./CC_MainAvenue_Median02_01_RaphisExcelsaPalms.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CC_M02_01_RhapisExcelsaPalm"
                {
                    over "Cube_019" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_8AAE6610E921E410/RaphisPalmsMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Material "RaphisPalmsMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_8AAE6610E921E410/RaphisPalmsMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_8AAE6610E921E410/RaphisPalmsMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_8AAE6610E921E410/RaphisPalmsMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    bool inputs:blend_enabled = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Material Flags"
                        displayName = "Blend Enabled"
                        doc = "Indicates if alpha state blending should be enabled."
                        hidden = false
                    )
                    asset inputs:diffuse_texture = @./raphis_palm_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @./raphis_palm_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./raphis_palm_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    bool inputs:use_legacy_alpha_state = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Material Flags"
                        displayName = "Use Legacy Alpha State"
                        doc = "Indicates if the alpha state should be derived from legacy information (the drawcall), or specified in the MDL."
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "CastIronFences" (
                prepend references = @./CC_MainAvenue_Median02_01_CastIronFences.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CC_M02_01_CastIronFences"
                {
                    over "Cube_020" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_8AAE6610E921E410/CastIronFencesMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Material "CastIronFencesMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_8AAE6610E921E410/CastIronFencesMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_8AAE6610E921E410/CastIronFencesMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_8AAE6610E921E410/CastIronFencesMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    color3f inputs:diffuse_color_constant = (0.2, 0.2, 0.25) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Base Color"
                        doc = "The base albedo color to use if no texture is specified"
                        hidden = false
                        renderType = "color"
                    )
                    float inputs:metallic_constant = 1 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Specular"
                        displayName = "Metallic Amount"
                        doc = "Metallic Material"
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @./cast_iron_fences_normals.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:reflection_roughness_constant = 0.17999999 (
                        customData = {
                            float default = 0.5
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Amount"
                        doc = "Higher roughness values lead to more blurry reflections"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }
        }

        over "mesh_D5F1D765783EBC64"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Material "AvenueConcreteWalls"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/AvenueConcreteWalls/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/AvenueConcreteWalls/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/AvenueConcreteWalls/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./concrete_foundation_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @./concrete_foundation_normals.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./concrete_foundation_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Material "SidewalkMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/SidewalkMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/SidewalkMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/SidewalkMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./sidewalk_grass_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @./sidewalk_grass_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./sidewalk_grass_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "Sidewalk" (
                prepend references = @./CC_MainAvenue_Median02_02.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "MedianPart2"
                {
                    over "GutterCorner_001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_D5F1D765783EBC64/SidewalkMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Xform "Bushes" (
                prepend references = @./CC_MainAvenue_Median02_02_Bushes.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "SmallHedgeFence_001"
                {
                    over "Cube_012" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_D5F1D765783EBC64/AvenueBushes> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }

                over "SmallHedgeFenceInterior_001"
                {
                    over "Cube_013" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_D5F1D765783EBC64/AvenueBushes> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Xform "Walls" (
                prepend references = @./CC_MainAvenue_Median02_02_Walls.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Base_002"
                {
                    over "mesh_1536" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_D5F1D765783EBC64/AvenueConcreteWalls> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Material "AvenueBushes"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/AvenueBushes/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/AvenueBushes/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/AvenueBushes/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    bool inputs:blend_enabled = 1 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Material Flags"
                        displayName = "Blend Enabled"
                        doc = "Indicates if alpha state blending should be enabled."
                        hidden = false
                    )
                    int inputs:blend_type = 0 (
                        customData = {
                            int default = 0
                        }
                        displayGroup = "Material Flags"
                        displayName = "Blend Type"
                        doc = "The alpha state blend type to use."
                        hidden = false
                        renderType = "BlendType"
                        sdrMetadata = {
                            string __SDR__enum_value = "Alpha"
                            string options = "Alpha:0|AlphaEmissive:1|ReverseAlphaEmissive:2|Color:3|ColorEmissive:4|ReverseColorEmissive:5|Emissive:6|Multiplicative:7|DoubleMultiplicative:8"
                        }
                    )
                    asset inputs:diffuse_texture = @./small_bushes_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @./small_bushes_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./small_bushes_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    bool inputs:use_legacy_alpha_state = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Material Flags"
                        displayName = "Use Legacy Alpha State"
                        doc = "Indicates if the alpha state should be derived from legacy information (the drawcall), or specified in the MDL."
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "TopFences" (
                prepend references = @./CC_MainAvenue_Median02_02_TopFences.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CC_M02_02_WallsTopFences"
                {
                    over "Cube_015" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_D5F1D765783EBC64/TopFencesMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Material "TopFencesMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/TopFencesMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/TopFencesMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/TopFencesMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./cast_iron_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:metallic_constant = 1 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Specular"
                        displayName = "Metallic Amount"
                        doc = "Metallic Material"
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @./cast_iron_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./cast_iron_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "GrassTop" (
                prepend references = @./CC_MainAvenue_Median02_02_GrassTop.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CC_M02_02_GrassTop"
                {
                    over "mesh_1538" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_D5F1D765783EBC64/SidewalkMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Material "RaphisPalmMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/RaphisPalmMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/RaphisPalmMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/RaphisPalmMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    bool inputs:blend_enabled = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Material Flags"
                        displayName = "Blend Enabled"
                        doc = "Indicates if alpha state blending should be enabled."
                        hidden = false
                    )
                    asset inputs:diffuse_texture = @./raphis_palm_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @./raphis_palm_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./raphis_palm_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    bool inputs:use_legacy_alpha_state = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Material Flags"
                        displayName = "Use Legacy Alpha State"
                        doc = "Indicates if the alpha state should be derived from legacy information (the drawcall), or specified in the MDL."
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "RaphisExcelsaPalms" (
                prepend references = @./CC_MainAvenue_Median02_02_RaphisExcelsaPalms.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CC_M02_02_RhapisExcelsaPalm"
                {
                    over "Cube_024" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_D5F1D765783EBC64/RaphisPalmMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Xform "CastIronFences" (
                prepend references = @./CC_MainAvenue_Median02_02_CastIronFences.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CC_M02_02_CastIronFences"
                {
                    over "Cube_021" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_D5F1D765783EBC64/CastIronFencesMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Material "CastIronFencesMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/CastIronFencesMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/CastIronFencesMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/CastIronFencesMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    color3f inputs:diffuse_color_constant = (0.2, 0.2, 0.25) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Base Color"
                        doc = "The base albedo color to use if no texture is specified"
                        hidden = false
                        renderType = "color"
                    )
                    float inputs:metallic_constant = 1 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Specular"
                        displayName = "Metallic Amount"
                        doc = "Metallic Material"
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @./cast_iron_fences_normals.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:reflection_roughness_constant = 0.17999999 (
                        customData = {
                            float default = 0.5
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Amount"
                        doc = "Higher roughness values lead to more blurry reflections"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }
        }

        over "mesh_9125C550F7FF6411"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_A7AFDE45EE8D0470"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }
    }
}

