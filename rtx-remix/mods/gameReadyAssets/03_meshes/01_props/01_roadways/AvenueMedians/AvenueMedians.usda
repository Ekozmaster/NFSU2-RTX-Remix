#usda 1.0
(
    upAxis = "Z"
)

over "RootNode"
{
    over "meshes"
    {
        over "mesh_4949BF8A38775990"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_90BD88457A3E8314"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_C5E68EE698D49CBE"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_347435A17EE95D60"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_8AAE6610E921E410"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Material "ConcreteWalls"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_8AAE6610E921E410/ConcreteWalls/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_8AAE6610E921E410/ConcreteWalls/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_8AAE6610E921E410/ConcreteWalls/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./concrete_foundation_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @./concrete_foundation_normals.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./concrete_foundation_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "Bushes" (
                prepend references = @./CC_MainAvenue_Median02_01_Bushes.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "SmallHedgeFenceInterior"
                {
                    over "Cube_011" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_8AAE6610E921E410/AvenueBushes> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }

                over "SmallHedgeFence"
                {
                    over "Cube" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_8AAE6610E921E410/AvenueBushes> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Material "SidewalkMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_8AAE6610E921E410/SidewalkMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_8AAE6610E921E410/SidewalkMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_8AAE6610E921E410/SidewalkMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./sidewalk_grass_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @./sidewalk_grass_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./sidewalk_grass_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "Sidewalk" (
                prepend references = @./CC_MainAvenue_Median02_01.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "MedianPart1"
                {
                    over "GutterCorner" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_8AAE6610E921E410/SidewalkMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Xform "Walls" (
                prepend references = @./CC_MainAvenue_Median02_01_Walls.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Base_001"
                {
                    over "mesh_878" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_8AAE6610E921E410/ConcreteWalls> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }

                over "Base"
                {
                    over "mesh_001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_8AAE6610E921E410/ConcreteWalls> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Material "AvenueBushes"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_8AAE6610E921E410/AvenueBushes/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_8AAE6610E921E410/AvenueBushes/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_8AAE6610E921E410/AvenueBushes/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    bool inputs:blend_enabled = 1 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Material Flags"
                        displayName = "Blend Enabled"
                        doc = """Indicates if alpha state blending should be enabled.\r
\r
"""
                        hidden = false
                    )
                    int inputs:blend_type = 0 (
                        customData = {
                            int default = 0
                        }
                        displayGroup = "Material Flags"
                        displayName = "Blend Type"
                        doc = """The alpha state blend type to use.\r
This parameter is unused.\r
"""
                        hidden = false
                        renderType = "BlendType"
                        sdrMetadata = {
                            string __SDR__enum_value = "Alpha"
                            string options = "Alpha:0|AlphaEmissive:1|ReverseAlphaEmissive:2|Color:3|ColorEmissive:4|ReverseColorEmissive:5|Emissive:6|Multiplicative:7|DoubleMultiplicative:8"
                        }
                    )
                    asset inputs:diffuse_texture = @./small_bushes_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel\r
\r
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @./small_bushes_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./small_bushes_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:subsurface_measurement_distance = 0.75 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 16
                                float min = 0
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Measurement Distance"
                        doc = """The distance between front and back surface of subsurface materials in millimeter, or the thickness of the surface.\r
This parameter is unused.\r
"""
                        hidden = false
                    )
                    color3f inputs:subsurface_single_scattering_albedo = (1, 0.84, 0.04) (
                        customData = {
                            float3 default = (0.5, 0.5, 0.5)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Single Scattering Albedo"
                        doc = """The color of light that most easily passes through the material after a single time scattering inside volume.\r
This parameter is unused.\r
"""
                        hidden = false
                        renderType = "color"
                    )
                    color3f inputs:subsurface_transmittance_color = (0.13, 0.11, 0.90999997) (
                        customData = {
                            float3 default = (0.5, 0.5, 0.5)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Transmittance Color"
                        doc = """The transmittance color of subsurface materials. This property can be easily considered as the light color after passing through volume.\r
This parameter is unused.\r
"""
                        hidden = false
                        renderType = "color"
                    )
                    float inputs:subsurface_volumetric_anisotropy = 0.16 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 0.99
                                float min = -0.99
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Volumetric Anisotropy"
                        doc = """The anisotropy of the scattering phase function. 0.99 = light mostly passes straight through (forward), 0 = light spreads a lot (diffuse), -0.99 = light mostly reflects (backward).\r
This parameter is unused.\r
"""
                        hidden = false
                    )
                    bool inputs:use_legacy_alpha_state = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Material Flags"
                        displayName = "Use Legacy Alpha State"
                        doc = """Indicates if the alpha state should be derived from legacy information (the drawcall), or specified in the MDL.\r
\r
"""
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Material "TopFencesMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_8AAE6610E921E410/TopFencesMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_8AAE6610E921E410/TopFencesMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_8AAE6610E921E410/TopFencesMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./cast_iron_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:metallic_constant = 1 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Specular"
                        displayName = "Metallic Amount"
                        doc = "Metallic Material"
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @./cast_iron_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./cast_iron_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "TopFences" (
                prepend references = @./CC_MainAvenue_Median02_01_TopFences.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CC_M02_01_WallsTopFences"
                {
                    over "Cube_014" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_8AAE6610E921E410/TopFencesMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Xform "GrassTop" (
                prepend references = @./CC_MainAvenue_Median02_01_GrassTop.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CC_M02_01_Grass_01"
                {
                    over "mesh_1537" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_8AAE6610E921E410/SidewalkMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Xform "RaphisExcelsaPalms" (
                prepend references = @./CC_MainAvenue_Median02_01_RaphisExcelsaPalms.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CC_M02_01_RhapisExcelsaPalm"
                {
                    over "Cube_019" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_8AAE6610E921E410/RaphisPalmsMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Material "RaphisPalmsMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_8AAE6610E921E410/RaphisPalmsMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_8AAE6610E921E410/RaphisPalmsMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_8AAE6610E921E410/RaphisPalmsMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    bool inputs:blend_enabled = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Material Flags"
                        displayName = "Blend Enabled"
                        doc = """Indicates if alpha state blending should be enabled.\r
\r
"""
                        hidden = false
                    )
                    color3f inputs:diffuse_color_constant = (0.2, 0.2, 0.2) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Base Color"
                        doc = """The base albedo color to use if no texture is specified\r
\r
"""
                        hidden = false
                        renderType = "color"
                    )
                    asset inputs:diffuse_texture = @./raphis_palm_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel\r
\r
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @./raphis_palm_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./raphis_palm_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:subsurface_measurement_distance = 0.75 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 16
                                float min = 0
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Measurement Distance"
                        doc = """The distance between front and back surface of subsurface materials in millimeter, or the thickness of the surface.\r
This parameter is unused.\r
"""
                        hidden = false
                    )
                    color3f inputs:subsurface_single_scattering_albedo = (1, 0.94, 0) (
                        customData = {
                            float3 default = (0.5, 0.5, 0.5)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Single Scattering Albedo"
                        doc = """The color of light that most easily passes through the material after a single time scattering inside volume.\r
This parameter is unused.\r
"""
                        hidden = false
                        renderType = "color"
                    )
                    color3f inputs:subsurface_transmittance_color = (0.11, 0.11, 0.97) (
                        customData = {
                            float3 default = (0.5, 0.5, 0.5)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Transmittance Color"
                        doc = """The transmittance color of subsurface materials. This property can be easily considered as the light color after passing through volume.\r
This parameter is unused.\r
"""
                        hidden = false
                        renderType = "color"
                    )
                    float inputs:subsurface_volumetric_anisotropy = 0.21 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 0.99
                                float min = -0.99
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Volumetric Anisotropy"
                        doc = """The anisotropy of the scattering phase function. 0.99 = light mostly passes straight through (forward), 0 = light spreads a lot (diffuse), -0.99 = light mostly reflects (backward).\r
This parameter is unused.\r
"""
                        hidden = false
                    )
                    bool inputs:use_legacy_alpha_state = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Material Flags"
                        displayName = "Use Legacy Alpha State"
                        doc = """Indicates if the alpha state should be derived from legacy information (the drawcall), or specified in the MDL.\r
\r
"""
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "CastIronFences" (
                prepend references = @./CC_MainAvenue_Median02_01_CastIronFences.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CC_M02_01_CastIronFences"
                {
                    over "Cube_020" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_8AAE6610E921E410/CastIronFencesMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Material "CastIronFencesMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_8AAE6610E921E410/CastIronFencesMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_8AAE6610E921E410/CastIronFencesMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_8AAE6610E921E410/CastIronFencesMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    color3f inputs:diffuse_color_constant = (0.2, 0.2, 0.25) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Base Color"
                        doc = "The base albedo color to use if no texture is specified"
                        hidden = false
                        renderType = "color"
                    )
                    float inputs:metallic_constant = 1 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Specular"
                        displayName = "Metallic Amount"
                        doc = "Metallic Material"
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @./cast_iron_fences_normals.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:reflection_roughness_constant = 0.17999999 (
                        customData = {
                            float default = 0.5
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Amount"
                        doc = "Higher roughness values lead to more blurry reflections"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "GrassTopCover" (
                prepend references = @./CC_MainAvenue_Median02_01_GrassTopCover.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CC_M02_01_GrassTop_001"
                {
                    over "mesh_135" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_8AAE6610E921E410/GrassTopCoverMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Material "GrassTopCoverMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_8AAE6610E921E410/GrassTopCoverMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_8AAE6610E921E410/GrassTopCoverMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_8AAE6610E921E410/GrassTopCoverMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    bool inputs:blend_enabled = 1 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Material Flags"
                        displayName = "Blend Enabled"
                        doc = "Indicates if alpha state blending should be enabled."
                        hidden = false
                    )
                    int inputs:blend_type = 0 (
                        customData = {
                            int default = 0
                        }
                        displayGroup = "Material Flags"
                        displayName = "Blend Type"
                        doc = "The alpha state blend type to use."
                        hidden = false
                        renderType = "BlendType"
                        sdrMetadata = {
                            string __SDR__enum_value = "Alpha"
                            string options = "Alpha:0|AlphaEmissive:1|ReverseAlphaEmissive:2|Color:3|ColorEmissive:4|ReverseColorEmissive:5|Emissive:6|Multiplicative:7|DoubleMultiplicative:8"
                        }
                    )
                    asset inputs:diffuse_texture = @./leaves_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @./leaves_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./leaves_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    bool inputs:use_legacy_alpha_state = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Material Flags"
                        displayName = "Use Legacy Alpha State"
                        doc = "Indicates if the alpha state should be derived from legacy information (the drawcall), or specified in the MDL."
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Material "PhilodendronRenauxiiMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_8AAE6610E921E410/PhilodendronRenauxiiMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_8AAE6610E921E410/PhilodendronRenauxiiMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_8AAE6610E921E410/PhilodendronRenauxiiMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    bool inputs:blend_enabled = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Material Flags"
                        displayName = "Blend Enabled"
                        doc = """Indicates if alpha state blending should be enabled.\r
\r
"""
                        hidden = false
                    )
                    int inputs:blend_type = 0 (
                        customData = {
                            int default = 0
                        }
                        displayGroup = "Material Flags"
                        displayName = "Blend Type"
                        doc = """The alpha state blend type to use.\r
This parameter is unused.\r
"""
                        hidden = false
                        renderType = "BlendType"
                        sdrMetadata = {
                            string __SDR__enum_value = "Alpha"
                            string options = "Alpha:0|AlphaEmissive:1|ReverseAlphaEmissive:2|Color:3|ColorEmissive:4|ReverseColorEmissive:5|Emissive:6|Multiplicative:7|DoubleMultiplicative:8"
                        }
                    )
                    asset inputs:diffuse_texture = @./philodendron_renauxii_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel\r
\r
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @./philodendron_renauxii_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./philodendron_renauxii_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:subsurface_measurement_distance = 0.71 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 16
                                float min = 0
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Measurement Distance"
                        doc = """The distance between front and back surface of subsurface materials in millimeter, or the thickness of the surface.\r
This parameter is unused.\r
"""
                        hidden = false
                    )
                    color3f inputs:subsurface_single_scattering_albedo = (1, 0.89, 0) (
                        customData = {
                            float3 default = (0.5, 0.5, 0.5)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Single Scattering Albedo"
                        doc = """The color of light that most easily passes through the material after a single time scattering inside volume.\r
This parameter is unused.\r
"""
                        hidden = false
                        renderType = "color"
                    )
                    color3f inputs:subsurface_transmittance_color = (0.089999996, 0.13, 0.93) (
                        customData = {
                            float3 default = (0.5, 0.5, 0.5)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Transmittance Color"
                        doc = """The transmittance color of subsurface materials. This property can be easily considered as the light color after passing through volume.\r
This parameter is unused.\r
"""
                        hidden = false
                        renderType = "color"
                    )
                    float inputs:subsurface_volumetric_anisotropy = 0.17 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 0.99
                                float min = -0.99
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Volumetric Anisotropy"
                        doc = """The anisotropy of the scattering phase function. 0.99 = light mostly passes straight through (forward), 0 = light spreads a lot (diffuse), -0.99 = light mostly reflects (backward).\r
This parameter is unused.\r
"""
                        hidden = false
                    )
                    bool inputs:use_legacy_alpha_state = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Material Flags"
                        displayName = "Use Legacy Alpha State"
                        doc = """Indicates if the alpha state should be derived from legacy information (the drawcall), or specified in the MDL.\r
\r
"""
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "PhilodendronRenauxiiBushes" (
                prepend references = @./CC_MainAvenue_Median02_01_PhilodendronRenauxii.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CC_M02_01_PhilodendronRenauxii"
                {
                    over "Cube_022" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_8AAE6610E921E410/PhilodendronRenauxiiMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Xform "LightPole" (
                prepend references = @../StreetLamps/DoubleSideCityCenterLightPoles.usda@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 81.32333181814147)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-535.3388838610916, -302.5086628233571, 27.724611140401226)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                    float inputs:intensity = 2000
                    bool inputs:normalize = 1
                    float inputs:radius = 0.3
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-4.165122886841914, 0, 16.29601243957018)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def SphereLight "SphereLight_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                    float inputs:intensity = 2000
                    bool inputs:normalize = 1
                    float inputs:radius = 0.3
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (4.291610595471354, 0, 16.29601243957018)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }
        }

        over "mesh_D5F1D765783EBC64"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Material "AvenueConcreteWalls"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/AvenueConcreteWalls/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/AvenueConcreteWalls/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/AvenueConcreteWalls/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./concrete_foundation_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @./concrete_foundation_normals.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./concrete_foundation_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Material "SidewalkMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/SidewalkMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/SidewalkMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/SidewalkMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./sidewalk_grass_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @./sidewalk_grass_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./sidewalk_grass_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "Sidewalk" (
                prepend references = @./CC_MainAvenue_Median02_02.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "MedianPart2"
                {
                    over "GutterCorner_001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_D5F1D765783EBC64/SidewalkMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Xform "Bushes" (
                prepend references = @./CC_MainAvenue_Median02_02_Bushes.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "SmallHedgeFence_001"
                {
                    over "Cube_012" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_D5F1D765783EBC64/AvenueBushes> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }

                over "SmallHedgeFenceInterior_001"
                {
                    over "Cube_013" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_D5F1D765783EBC64/AvenueBushes> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Xform "Walls" (
                prepend references = @./CC_MainAvenue_Median02_02_Walls.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Base_002"
                {
                    over "mesh_1536" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_D5F1D765783EBC64/AvenueConcreteWalls> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Material "AvenueBushes"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/AvenueBushes/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/AvenueBushes/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/AvenueBushes/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    bool inputs:blend_enabled = 1 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Material Flags"
                        displayName = "Blend Enabled"
                        doc = """Indicates if alpha state blending should be enabled.\r
\r
"""
                        hidden = false
                    )
                    int inputs:blend_type = 0 (
                        customData = {
                            int default = 0
                        }
                        displayGroup = "Material Flags"
                        displayName = "Blend Type"
                        doc = """The alpha state blend type to use.\r
This parameter is unused.\r
"""
                        hidden = false
                        renderType = "BlendType"
                        sdrMetadata = {
                            string __SDR__enum_value = "Alpha"
                            string options = "Alpha:0|AlphaEmissive:1|ReverseAlphaEmissive:2|Color:3|ColorEmissive:4|ReverseColorEmissive:5|Emissive:6|Multiplicative:7|DoubleMultiplicative:8"
                        }
                    )
                    asset inputs:diffuse_texture = @./small_bushes_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel\r
\r
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @./small_bushes_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./small_bushes_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:subsurface_measurement_distance = 0.78999996 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 16
                                float min = 0
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Measurement Distance"
                        doc = """The distance between front and back surface of subsurface materials in millimeter, or the thickness of the surface.\r
This parameter is unused.\r
"""
                        hidden = false
                    )
                    color3f inputs:subsurface_single_scattering_albedo = (1, 0.97999996, 0) (
                        customData = {
                            float3 default = (0.5, 0.5, 0.5)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Single Scattering Albedo"
                        doc = """The color of light that most easily passes through the material after a single time scattering inside volume.\r
This parameter is unused.\r
"""
                        hidden = false
                        renderType = "color"
                    )
                    color3f inputs:subsurface_transmittance_color = (0.11, 0.11, 0.90999997) (
                        customData = {
                            float3 default = (0.5, 0.5, 0.5)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Transmittance Color"
                        doc = """The transmittance color of subsurface materials. This property can be easily considered as the light color after passing through volume.\r
This parameter is unused.\r
"""
                        hidden = false
                        renderType = "color"
                    )
                    float inputs:subsurface_volumetric_anisotropy = 0.19999999 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 0.99
                                float min = -0.99
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Volumetric Anisotropy"
                        doc = """The anisotropy of the scattering phase function. 0.99 = light mostly passes straight through (forward), 0 = light spreads a lot (diffuse), -0.99 = light mostly reflects (backward).\r
This parameter is unused.\r
"""
                        hidden = false
                    )
                    bool inputs:use_legacy_alpha_state = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Material Flags"
                        displayName = "Use Legacy Alpha State"
                        doc = """Indicates if the alpha state should be derived from legacy information (the drawcall), or specified in the MDL.\r
\r
"""
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "TopFences" (
                prepend references = @./CC_MainAvenue_Median02_02_TopFences.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CC_M02_02_WallsTopFences"
                {
                    over "Cube_015" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_D5F1D765783EBC64/TopFencesMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Material "TopFencesMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/TopFencesMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/TopFencesMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/TopFencesMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./cast_iron_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:metallic_constant = 1 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Specular"
                        displayName = "Metallic Amount"
                        doc = "Metallic Material"
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @./cast_iron_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./cast_iron_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "GrassTop" (
                prepend references = @./CC_MainAvenue_Median02_02_GrassTop.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CC_M02_02_GrassTop"
                {
                    over "mesh_1538" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_D5F1D765783EBC64/SidewalkMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Material "RaphisPalmMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/RaphisPalmMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/RaphisPalmMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/RaphisPalmMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    bool inputs:blend_enabled = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Material Flags"
                        displayName = "Blend Enabled"
                        doc = """Indicates if alpha state blending should be enabled.\r
\r
"""
                        hidden = false
                    )
                    asset inputs:diffuse_texture = @./raphis_palm_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel\r
\r
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @./raphis_palm_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./raphis_palm_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:subsurface_measurement_distance = 0.71 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 16
                                float min = 0
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Measurement Distance"
                        doc = """The distance between front and back surface of subsurface materials in millimeter, or the thickness of the surface.\r
This parameter is unused.\r
"""
                        hidden = false
                    )
                    color3f inputs:subsurface_single_scattering_albedo = (1, 0.93, 0) (
                        customData = {
                            float3 default = (0.5, 0.5, 0.5)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Single Scattering Albedo"
                        doc = """The color of light that most easily passes through the material after a single time scattering inside volume.\r
This parameter is unused.\r
"""
                        hidden = false
                        renderType = "color"
                    )
                    color3f inputs:subsurface_transmittance_color = (0.11, 0.11, 0.97999996) (
                        customData = {
                            float3 default = (0.5, 0.5, 0.5)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Transmittance Color"
                        doc = """The transmittance color of subsurface materials. This property can be easily considered as the light color after passing through volume.\r
This parameter is unused.\r
"""
                        hidden = false
                        renderType = "color"
                    )
                    float inputs:subsurface_volumetric_anisotropy = 0.19999999 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 0.99
                                float min = -0.99
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Volumetric Anisotropy"
                        doc = """The anisotropy of the scattering phase function. 0.99 = light mostly passes straight through (forward), 0 = light spreads a lot (diffuse), -0.99 = light mostly reflects (backward).\r
This parameter is unused.\r
"""
                        hidden = false
                    )
                    bool inputs:use_legacy_alpha_state = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Material Flags"
                        displayName = "Use Legacy Alpha State"
                        doc = """Indicates if the alpha state should be derived from legacy information (the drawcall), or specified in the MDL.\r
\r
"""
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "RaphisExcelsaPalms" (
                prepend references = @./CC_MainAvenue_Median02_02_RaphisExcelsaPalms.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CC_M02_02_RhapisExcelsaPalm"
                {
                    over "Cube_024" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_D5F1D765783EBC64/RaphisPalmMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Xform "CastIronFences" (
                prepend references = @./CC_MainAvenue_Median02_02_CastIronFences.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CC_M02_02_CastIronFences"
                {
                    over "Cube_021" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_D5F1D765783EBC64/CastIronFencesMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Material "CastIronFencesMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/CastIronFencesMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/CastIronFencesMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/CastIronFencesMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    color3f inputs:diffuse_color_constant = (0.2, 0.2, 0.25) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Base Color"
                        doc = "The base albedo color to use if no texture is specified"
                        hidden = false
                        renderType = "color"
                    )
                    float inputs:metallic_constant = 1 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Specular"
                        displayName = "Metallic Amount"
                        doc = "Metallic Material"
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @./cast_iron_fences_normals.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:reflection_roughness_constant = 0.17999999 (
                        customData = {
                            float default = 0.5
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Amount"
                        doc = "Higher roughness values lead to more blurry reflections"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "GrassTopCover" (
                prepend references = @./CC_MainAvenue_Median02_02_GrassTopCover.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CC_M02_02_GrassTop_001"
                {
                    over "mesh_154" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_D5F1D765783EBC64/GrassTopCoverMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Material "GrassTopCoverMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/GrassTopCoverMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/GrassTopCoverMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/GrassTopCoverMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    bool inputs:blend_enabled = 1 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Material Flags"
                        displayName = "Blend Enabled"
                        doc = "Indicates if alpha state blending should be enabled."
                        hidden = false
                    )
                    int inputs:blend_type = 0 (
                        customData = {
                            int default = 0
                        }
                        displayGroup = "Material Flags"
                        displayName = "Blend Type"
                        doc = "The alpha state blend type to use."
                        hidden = false
                        renderType = "BlendType"
                        sdrMetadata = {
                            string __SDR__enum_value = "Alpha"
                            string options = "Alpha:0|AlphaEmissive:1|ReverseAlphaEmissive:2|Color:3|ColorEmissive:4|ReverseColorEmissive:5|Emissive:6|Multiplicative:7|DoubleMultiplicative:8"
                        }
                    )
                    asset inputs:diffuse_texture = @./leaves_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @./leaves_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./leaves_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    bool inputs:use_legacy_alpha_state = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Material Flags"
                        displayName = "Use Legacy Alpha State"
                        doc = "Indicates if the alpha state should be derived from legacy information (the drawcall), or specified in the MDL."
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Material "PhilodendronRenauxiiMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/PhilodendronRenauxiiMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/PhilodendronRenauxiiMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_D5F1D765783EBC64/PhilodendronRenauxiiMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    bool inputs:blend_enabled = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Material Flags"
                        displayName = "Blend Enabled"
                        doc = """Indicates if alpha state blending should be enabled.\r
\r
"""
                        hidden = false
                    )
                    int inputs:blend_type = 0 (
                        customData = {
                            int default = 0
                        }
                        displayGroup = "Material Flags"
                        displayName = "Blend Type"
                        doc = """The alpha state blend type to use.\r
This parameter is unused.\r
"""
                        hidden = false
                        renderType = "BlendType"
                        sdrMetadata = {
                            string __SDR__enum_value = "Alpha"
                            string options = "Alpha:0|AlphaEmissive:1|ReverseAlphaEmissive:2|Color:3|ColorEmissive:4|ReverseColorEmissive:5|Emissive:6|Multiplicative:7|DoubleMultiplicative:8"
                        }
                    )
                    asset inputs:diffuse_texture = @./philodendron_renauxii_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel\r
\r
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @./philodendron_renauxii_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./philodendron_renauxii_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:subsurface_measurement_distance = 0.75 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 16
                                float min = 0
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Measurement Distance"
                        doc = """The distance between front and back surface of subsurface materials in millimeter, or the thickness of the surface.\r
This parameter is unused.\r
"""
                        hidden = false
                    )
                    color3f inputs:subsurface_single_scattering_albedo = (1, 0.89, 0) (
                        customData = {
                            float3 default = (0.5, 0.5, 0.5)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Single Scattering Albedo"
                        doc = """The color of light that most easily passes through the material after a single time scattering inside volume.\r
This parameter is unused.\r
"""
                        hidden = false
                        renderType = "color"
                    )
                    color3f inputs:subsurface_transmittance_color = (0.11, 0.11, 0.93) (
                        customData = {
                            float3 default = (0.5, 0.5, 0.5)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Transmittance Color"
                        doc = """The transmittance color of subsurface materials. This property can be easily considered as the light color after passing through volume.\r
This parameter is unused.\r
"""
                        hidden = false
                        renderType = "color"
                    )
                    float inputs:subsurface_volumetric_anisotropy = 0.17 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 0.99
                                float min = -0.99
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Volumetric Anisotropy"
                        doc = """The anisotropy of the scattering phase function. 0.99 = light mostly passes straight through (forward), 0 = light spreads a lot (diffuse), -0.99 = light mostly reflects (backward).\r
This parameter is unused.\r
"""
                        hidden = false
                    )
                    bool inputs:use_legacy_alpha_state = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Material Flags"
                        displayName = "Use Legacy Alpha State"
                        doc = """Indicates if the alpha state should be derived from legacy information (the drawcall), or specified in the MDL.\r
\r
"""
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "PhilodendronRenauxiiBushes" (
                prepend references = @./CC_MainAvenue_Median02_02_PhilodendronRenauxii.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CC_M02_02_PhilodendronRenauxii"
                {
                    over "Cube_023" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_D5F1D765783EBC64/PhilodendronRenauxiiMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Xform "LightPole" (
                prepend references = @../StreetLamps/DoubleSideCityCenterLightPoles.usda@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 80.78061515942011)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-563.1641052263767, -298.95727799288323, 27.598710724110358)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def SphereLight "SphereLight_02" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                    float inputs:intensity = 2000
                    bool inputs:normalize = 1
                    float inputs:radius = 0.3
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (4.228326453312661, -0.009211101507503372, 16.336346099627196)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def SphereLight "SphereLight_03" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                    float inputs:intensity = 2000
                    bool inputs:normalize = 1
                    float inputs:radius = 0.3
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-4.205901147004738, -0.009211101483288076, 16.336346099627196)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }
        }

        over "mesh_9125C550F7FF6411"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_A7AFDE45EE8D0470"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_27C0E50AE4759BC9"
        {
            def Xform "BannerAds" (
                prepend references = @./MediansBannerAds.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "BannerAd"
                {
                    over "mesh_461" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        uniform bool doubleSided = 0
                        rel material:binding = </RootNode/meshes/mesh_27C0E50AE4759BC9/BannerAdsMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        bool singleSided = 1
                    }
                }
            }

            over "mesh" (
                active = false
            )
            {
            }

            def Material "BannerAdsMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_27C0E50AE4759BC9/BannerAdsMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_27C0E50AE4759BC9/BannerAdsMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_27C0E50AE4759BC9/BannerAdsMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./banner_ads_albedo.dds@ (
                        colorSpace = "sRGB"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel\r
\r
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./banner_ads_roughness.dds@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:subsurface_measurement_distance = 0.71 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 16
                                float min = 0
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Measurement Distance"
                        doc = """The distance between front and back surface of subsurface materials in millimeter, or the thickness of the surface.\r
This parameter is unused.\r
"""
                        hidden = false
                    )
                    asset inputs:subsurface_single_scattering_texture = @./banner_ads_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Single Scattering Map"
                        doc = """The texture specifying the scattering albedo of subsurface materials.\r
This parameter is unused.\r
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    color3f inputs:subsurface_transmittance_color = (0.2, 0.2, 0.2) (
                        customData = {
                            float3 default = (0.5, 0.5, 0.5)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Transmittance Color"
                        doc = """The transmittance color of subsurface materials. This property can be easily considered as the light color after passing through volume.\r
This parameter is unused.\r
"""
                        hidden = false
                        renderType = "color"
                    )
                    float inputs:subsurface_volumetric_anisotropy = 0.19999999 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 0.99
                                float min = -0.99
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Volumetric Anisotropy"
                        doc = """The anisotropy of the scattering phase function. 0.99 = light mostly passes straight through (forward), 0 = light spreads a lot (diffuse), -0.99 = light mostly reflects (backward).\r
This parameter is unused.\r
"""
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "FlagSupportRight" (
                prepend references = @./MediansBannerAdsSupport.usda@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1.342)
                double3 xformOp:translate = (0, 0.05, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "FlagSupportLeft" (
                prepend references = @./MediansBannerAdsSupport.usda@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 180)
                double3 xformOp:scale = (1, 1, 1.339)
                double3 xformOp:translate = (-0.175, -0.43, 0.03)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_1D1FCA347382B032"
        {
            def Xform "BannerAds" (
                prepend references = @./MediansBannerAds.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.462, 0.462, 0.462)
                double3 xformOp:translate = (0.05, 0.10000000149011612, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "BannerAd"
                {
                    over "mesh_461" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        uniform bool doubleSided = 0
                        rel material:binding = </RootNode/meshes/mesh_1D1FCA347382B032/BannerAdsMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        bool singleSided = 1
                    }
                }
            }

            def Material "BannerAdsMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_1D1FCA347382B032/BannerAdsMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_1D1FCA347382B032/BannerAdsMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_1D1FCA347382B032/BannerAdsMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./banner_ads_albedo.dds@ (
                        colorSpace = "sRGB"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel\r
\r
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./banner_ads_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:subsurface_measurement_distance = 0.75 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 16
                                float min = 0
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Measurement Distance"
                        doc = """The distance between front and back surface of subsurface materials in millimeter, or the thickness of the surface.\r
This parameter is unused.\r
"""
                        hidden = false
                    )
                    asset inputs:subsurface_single_scattering_texture = @./banner_ads_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Single Scattering Map"
                        doc = """The texture specifying the scattering albedo of subsurface materials.\r
This parameter is unused.\r
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    color3f inputs:subsurface_transmittance_color = (0.2, 0.2, 0.2) (
                        customData = {
                            float3 default = (0.5, 0.5, 0.5)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Transmittance Color"
                        doc = """The transmittance color of subsurface materials. This property can be easily considered as the light color after passing through volume.\r
This parameter is unused.\r
"""
                        hidden = false
                        renderType = "color"
                    )
                    float inputs:subsurface_volumetric_anisotropy = 0.19999999 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 0.99
                                float min = -0.99
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Volumetric Anisotropy"
                        doc = """The anisotropy of the scattering phase function. 0.99 = light mostly passes straight through (forward), 0 = light spreads a lot (diffuse), -0.99 = light mostly reflects (backward).\r
This parameter is unused.\r
"""
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            over "mesh" (
                active = false
            )
            {
            }

            def Xform "FlagSupportLeft" (
                prepend references = @./MediansBannerAdsSupport.usda@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.462, 0.462, 0.62)
                double3 xformOp:translate = (0.05, 0.16, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "FlagSupportRight" (
                prepend references = @./MediansBannerAdsSupport.usda@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 180)
                double3 xformOp:scale = (0.462, 0.462, 0.619)
                double3 xformOp:translate = (-0.033, -0.16, 0.013)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_88BD5145A8548A10"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_0A0313C3817410D5"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_D0A161F47F632BEE"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Material "ConcreteWalls"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_D0A161F47F632BEE/ConcreteWalls/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_D0A161F47F632BEE/ConcreteWalls/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_D0A161F47F632BEE/ConcreteWalls/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./concrete_foundation_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @./concrete_foundation_normals.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./concrete_foundation_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "Bushes" (
                prepend references = @./CC_MainAvenue_Median01_01_Bushes.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CC_M02_02_SmallHedgeFences"
                {
                    over "Cube_024" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_D0A161F47F632BEE/AvenueBushes> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }

                over "SmallHedgeFenceInterior_001"
                {
                    over "Cube_021" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_D0A161F47F632BEE/AvenueBushes> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Xform "Walls" (
                prepend references = @./CC_MainAvenue_Median01_01_Walls.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CC_M02_01_Walls"
                {
                    over "mesh_1608" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_D0A161F47F632BEE/ConcreteWalls> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Material "AvenueBushes"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_D0A161F47F632BEE/AvenueBushes/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_D0A161F47F632BEE/AvenueBushes/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_D0A161F47F632BEE/AvenueBushes/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    bool inputs:blend_enabled = 1 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Material Flags"
                        displayName = "Blend Enabled"
                        doc = """Indicates if alpha state blending should be enabled.\r
\r
"""
                        hidden = false
                    )
                    int inputs:blend_type = 0 (
                        customData = {
                            int default = 0
                        }
                        displayGroup = "Material Flags"
                        displayName = "Blend Type"
                        doc = """The alpha state blend type to use.\r
This parameter is unused.\r
"""
                        hidden = false
                        renderType = "BlendType"
                        sdrMetadata = {
                            string __SDR__enum_value = "Alpha"
                            string options = "Alpha:0|AlphaEmissive:1|ReverseAlphaEmissive:2|Color:3|ColorEmissive:4|ReverseColorEmissive:5|Emissive:6|Multiplicative:7|DoubleMultiplicative:8"
                        }
                    )
                    asset inputs:diffuse_texture = @./small_bushes_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel\r
\r
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @./small_bushes_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./small_bushes_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:subsurface_measurement_distance = 0.71 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 16
                                float min = 0
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Measurement Distance"
                        doc = """The distance between front and back surface of subsurface materials in millimeter, or the thickness of the surface.\r
This parameter is unused.\r
"""
                        hidden = false
                    )
                    color3f inputs:subsurface_single_scattering_albedo = (1, 0.96, 0) (
                        customData = {
                            float3 default = (0.5, 0.5, 0.5)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Single Scattering Albedo"
                        doc = """The color of light that most easily passes through the material after a single time scattering inside volume.\r
This parameter is unused.\r
"""
                        hidden = false
                        renderType = "color"
                    )
                    color3f inputs:subsurface_transmittance_color = (0.17, 0.11, 0.93) (
                        customData = {
                            float3 default = (0.5, 0.5, 0.5)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Transmittance Color"
                        doc = """The transmittance color of subsurface materials. This property can be easily considered as the light color after passing through volume.\r
This parameter is unused.\r
"""
                        hidden = false
                        renderType = "color"
                    )
                    float inputs:subsurface_volumetric_anisotropy = 0.21 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 0.99
                                float min = -0.99
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Volumetric Anisotropy"
                        doc = """The anisotropy of the scattering phase function. 0.99 = light mostly passes straight through (forward), 0 = light spreads a lot (diffuse), -0.99 = light mostly reflects (backward).\r
This parameter is unused.\r
"""
                        hidden = false
                    )
                    bool inputs:use_legacy_alpha_state = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Material Flags"
                        displayName = "Use Legacy Alpha State"
                        doc = """Indicates if the alpha state should be derived from legacy information (the drawcall), or specified in the MDL.\r
\r
"""
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Material "TopFencesMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_D0A161F47F632BEE/TopFencesMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_D0A161F47F632BEE/TopFencesMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_D0A161F47F632BEE/TopFencesMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./cast_iron_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:metallic_constant = 1 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Specular"
                        displayName = "Metallic Amount"
                        doc = "Metallic Material"
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @./cast_iron_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./cast_iron_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "TopFences" (
                prepend references = @./CC_MainAvenue_Median01_01_TopFences.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CC_M02_01_WallsTopFences"
                {
                    over "Cube_028" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_D0A161F47F632BEE/TopFencesMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Xform "GrassTop" (
                prepend references = @./CC_MainAvenue_Median01_01_GrassTop.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CC_M02_01_GrassTop"
                {
                    over "mesh_1610" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_D0A161F47F632BEE/SidewalkMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Xform "RaphisExcelsaPalms" (
                prepend references = @./CC_MainAvenue_Median01_01_RaphisExcelsaPalms.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CC_M02_01_RhapisExcelsaPalm"
                {
                    over "Cube_029" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_D0A161F47F632BEE/RaphisPalmsMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Material "RaphisPalmsMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_D0A161F47F632BEE/RaphisPalmsMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_D0A161F47F632BEE/RaphisPalmsMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_D0A161F47F632BEE/RaphisPalmsMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    bool inputs:blend_enabled = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Material Flags"
                        displayName = "Blend Enabled"
                        doc = """Indicates if alpha state blending should be enabled.\r
\r
"""
                        hidden = false
                    )
                    asset inputs:diffuse_texture = @./raphis_palm_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel\r
\r
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @./raphis_palm_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./raphis_palm_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:subsurface_measurement_distance = 0.71 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 16
                                float min = 0
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Measurement Distance"
                        doc = """The distance between front and back surface of subsurface materials in millimeter, or the thickness of the surface.\r
This parameter is unused.\r
"""
                        hidden = false
                    )
                    color3f inputs:subsurface_single_scattering_albedo = (1, 0.90999997, 0) (
                        customData = {
                            float3 default = (0.5, 0.5, 0.5)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Single Scattering Albedo"
                        doc = """The color of light that most easily passes through the material after a single time scattering inside volume.\r
This parameter is unused.\r
"""
                        hidden = false
                        renderType = "color"
                    )
                    color3f inputs:subsurface_transmittance_color = (0.089999996, 0.13, 0.96) (
                        customData = {
                            float3 default = (0.5, 0.5, 0.5)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Transmittance Color"
                        doc = """The transmittance color of subsurface materials. This property can be easily considered as the light color after passing through volume.\r
This parameter is unused.\r
"""
                        hidden = false
                        renderType = "color"
                    )
                    float inputs:subsurface_volumetric_anisotropy = 0.17999999 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 0.99
                                float min = -0.99
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Volumetric Anisotropy"
                        doc = """The anisotropy of the scattering phase function. 0.99 = light mostly passes straight through (forward), 0 = light spreads a lot (diffuse), -0.99 = light mostly reflects (backward).\r
This parameter is unused.\r
"""
                        hidden = false
                    )
                    bool inputs:use_legacy_alpha_state = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Material Flags"
                        displayName = "Use Legacy Alpha State"
                        doc = """Indicates if the alpha state should be derived from legacy information (the drawcall), or specified in the MDL.\r
\r
"""
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "CastIronFences" (
                prepend references = @./CC_MainAvenue_Median01_01_CastIronFences.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CC_M02_01_CastIronFences"
                {
                    over "Cube_031" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_D0A161F47F632BEE/CastIronFencesMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Material "CastIronFencesMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_D0A161F47F632BEE/CastIronFencesMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_D0A161F47F632BEE/CastIronFencesMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_D0A161F47F632BEE/CastIronFencesMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    color3f inputs:diffuse_color_constant = (0.2, 0.2, 0.25) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Base Color"
                        doc = "The base albedo color to use if no texture is specified"
                        hidden = false
                        renderType = "color"
                    )
                    float inputs:metallic_constant = 1 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Specular"
                        displayName = "Metallic Amount"
                        doc = "Metallic Material"
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @./cast_iron_fences_normals.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:reflection_roughness_constant = 0.17999999 (
                        customData = {
                            float default = 0.5
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Amount"
                        doc = "Higher roughness values lead to more blurry reflections"
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "GrassTopCover" (
                prepend references = @./CC_MainAvenue_Median01_01_GrassTopCover.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CC_M02_01_GrassTopCover"
                {
                    over "mesh_1609" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_D0A161F47F632BEE/GrassTopCoverMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Material "GrassTopCoverMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_D0A161F47F632BEE/GrassTopCoverMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_D0A161F47F632BEE/GrassTopCoverMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_D0A161F47F632BEE/GrassTopCoverMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    bool inputs:blend_enabled = 1 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Material Flags"
                        displayName = "Blend Enabled"
                        doc = """Indicates if alpha state blending should be enabled.\r\r\r
\r\r\r
"""
                        hidden = false
                    )
                    int inputs:blend_type = 0 (
                        customData = {
                            int default = 0
                        }
                        displayGroup = "Material Flags"
                        displayName = "Blend Type"
                        doc = """The alpha state blend type to use.\r\r\r
This parameter is unused.\r\r\r
"""
                        hidden = false
                        renderType = "BlendType"
                        sdrMetadata = {
                            string __SDR__enum_value = "Alpha"
                            string options = "Alpha:0|AlphaEmissive:1|ReverseAlphaEmissive:2|Color:3|ColorEmissive:4|ReverseColorEmissive:5|Emissive:6|Multiplicative:7|DoubleMultiplicative:8"
                        }
                    )
                    asset inputs:diffuse_texture = @./leaves_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel\r\r\r
\r\r\r
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @./leaves_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./leaves_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    bool inputs:use_legacy_alpha_state = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Material Flags"
                        displayName = "Use Legacy Alpha State"
                        doc = """Indicates if the alpha state should be derived from legacy information (the drawcall), or specified in the MDL.\r\r\r
\r\r\r
"""
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Material "PhilodendronRenauxiiMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_D0A161F47F632BEE/PhilodendronRenauxiiMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_D0A161F47F632BEE/PhilodendronRenauxiiMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_D0A161F47F632BEE/PhilodendronRenauxiiMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    bool inputs:blend_enabled = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Material Flags"
                        displayName = "Blend Enabled"
                        doc = """Indicates if alpha state blending should be enabled.\r
\r
"""
                        hidden = false
                    )
                    int inputs:blend_type = 0 (
                        customData = {
                            int default = 0
                        }
                        displayGroup = "Material Flags"
                        displayName = "Blend Type"
                        doc = """The alpha state blend type to use.\r
This parameter is unused.\r
"""
                        hidden = false
                        renderType = "BlendType"
                        sdrMetadata = {
                            string __SDR__enum_value = "Alpha"
                            string options = "Alpha:0|AlphaEmissive:1|ReverseAlphaEmissive:2|Color:3|ColorEmissive:4|ReverseColorEmissive:5|Emissive:6|Multiplicative:7|DoubleMultiplicative:8"
                        }
                    )
                    asset inputs:diffuse_texture = @./philodendron_renauxii_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel\r
\r
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @./philodendron_renauxii_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./philodendron_renauxii_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:subsurface_measurement_distance = 0.75 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 16
                                float min = 0
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Measurement Distance"
                        doc = """The distance between front and back surface of subsurface materials in millimeter, or the thickness of the surface.\r
This parameter is unused.\r
"""
                        hidden = false
                    )
                    color3f inputs:subsurface_single_scattering_albedo = (1, 0.93, 0) (
                        customData = {
                            float3 default = (0.5, 0.5, 0.5)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Single Scattering Albedo"
                        doc = """The color of light that most easily passes through the material after a single time scattering inside volume.\r
This parameter is unused.\r
"""
                        hidden = false
                        renderType = "color"
                    )
                    color3f inputs:subsurface_transmittance_color = (0.11, 0.13, 0.90999997) (
                        customData = {
                            float3 default = (0.5, 0.5, 0.5)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Transmittance Color"
                        doc = """The transmittance color of subsurface materials. This property can be easily considered as the light color after passing through volume.\r
This parameter is unused.\r
"""
                        hidden = false
                        renderType = "color"
                    )
                    float inputs:subsurface_volumetric_anisotropy = 0.21 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 0.99
                                float min = -0.99
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Volumetric Anisotropy"
                        doc = """The anisotropy of the scattering phase function. 0.99 = light mostly passes straight through (forward), 0 = light spreads a lot (diffuse), -0.99 = light mostly reflects (backward).\r
This parameter is unused.\r
"""
                        hidden = false
                    )
                    bool inputs:use_legacy_alpha_state = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Material Flags"
                        displayName = "Use Legacy Alpha State"
                        doc = """Indicates if the alpha state should be derived from legacy information (the drawcall), or specified in the MDL.\r
\r
"""
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "PhilodendronRenauxiiBushes" (
                prepend references = @./CC_MainAvenue_Median01_01_PhilodendronRenauxii.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CC_M02_02_PhilodendronRenauxii"
                {
                    over "Cube_026" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_D0A161F47F632BEE/PhilodendronRenauxiiMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Xform "LightPole" (
                prepend references = @../StreetLamps/DoubleSideCityCenterLightPoles.usda@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 41.85570643599945)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-677.7671790002835, -232.87664755921256, 27.72461114040066)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                    float inputs:intensity = 2000
                    bool inputs:normalize = 1
                    float inputs:radius = 0.3
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-4.165122886841914, 0, 16.29601243957018)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def SphereLight "SphereLight_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                    float inputs:intensity = 2000
                    bool inputs:normalize = 1
                    float inputs:radius = 0.3
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (4.291610595471354, 0, 16.29601243957018)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "LightPole_01" (
                prepend references = @../StreetLamps/DoubleSideCityCenterLightPoles.usda@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 41.85570643599945)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-701.1288320771959, -208.5760279371864, 27.724611140401187)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                    float inputs:intensity = 2000
                    bool inputs:normalize = 1
                    float inputs:radius = 0.3
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-4.165122886841914, 0, 16.29601243957018)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def SphereLight "SphereLight_01" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                    float inputs:intensity = 2000
                    bool inputs:normalize = 1
                    float inputs:radius = 0.3
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (4.291610595471354, 0, 16.29601243957018)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Sidewalk" (
                prepend references = @./CC_MainAvenue_Median01_01.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "GutterCorner_002"
                {
                    over "Plane_006" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_D0A161F47F632BEE/SidewalkMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Material "SidewalkMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_D0A161F47F632BEE/SidewalkMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_D0A161F47F632BEE/SidewalkMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_D0A161F47F632BEE/SidewalkMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./sidewalk_grass_albedo.dds@ (
                        colorSpace = "sRGB"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel\r\r\r
\r\r\r
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @./sidewalk_grass_normal.dds@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./sidewalk_grass_roughness.dds@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "GuardRails" (
                prepend references = @./CC_MainAvenue_Median01_01_GuardRails.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "RetroReflectors_003"
                {
                    over "Cube_032" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_D0A161F47F632BEE/GuardRailsRetroreflectorsMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }

                over "RetroReflectors_002"
                {
                    over "Cube_030" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_D0A161F47F632BEE/GuardRailsMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Material "GuardRailsMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_D0A161F47F632BEE/GuardRailsMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_D0A161F47F632BEE/GuardRailsMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_D0A161F47F632BEE/GuardRailsMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @../GuardRails/albedo.dds@ (
                        colorSpace = "sRGB"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel\r\r\r
\r\r\r
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:metallic_texture = @../GuardRails/metallic.dds@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Metallic Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @../GuardRails/roughness.dds@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Material "GuardRailsRetroreflectorsMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_D0A161F47F632BEE/GuardRailsRetroreflectorsMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_D0A161F47F632BEE/GuardRailsRetroreflectorsMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_D0A161F47F632BEE/GuardRailsRetroreflectorsMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @../GuardRails/RetroReflective_albedo.dds@ (
                        colorSpace = "sRGB"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel\r\r\r
\r\r\r
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:emissive_mask_texture = @../GuardRails/RetroReflective_emissive.dds@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Mask Map"
                        doc = """The texture masking the emissive color\r\r\r
\r\r\r
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    bool inputs:enable_emission = 1 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Emissive"
                        displayName = "Enable Emission"
                        doc = """Enables the emission of light from the material\r\r\r
\r\r\r
"""
                        hidden = false
                    )
                    asset inputs:metallic_texture = @../GuardRails/Retrorefelctive_metallic.dds@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Metallic Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @../GuardRails/RetroReflective_roughness.dds@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "LightBollard" (
                prepend references = @../Bollards/LightBollards.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -59.636478941292495)
                double3 xformOp:scale = (0.6, 0.6, 1.2)
                double3 xformOp:translate = (-668.6567656184368, -246.76496861841238, 28.192104102008923)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "LightBollard_01" (
                prepend references = @../Bollards/LightBollards.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -59.636478941292495)
                double3 xformOp:scale = (0.6, 0.6, 1.2)
                double3 xformOp:translate = (-669.4156726515447, -245.81073172650525, 28.192104102008923)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "LightBollard_02" (
                prepend references = @../Bollards/LightBollards.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -59.636478941292495)
                double3 xformOp:scale = (0.6, 0.6, 1.2)
                double3 xformOp:translate = (-670.1988596355183, -244.8220094308644, 28.192104102008923)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "LightBollard_03" (
                prepend references = @../Bollards/LightBollards.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -230.90000344067812)
                double3 xformOp:scale = (0.6, 0.6, 1.2)
                double3 xformOp:translate = (-665.9292313644263, -244.67443639581572, 28.1921)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "LightBollard_04" (
                prepend references = @../Bollards/LightBollards.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -230.90000344067812)
                double3 xformOp:scale = (0.6, 0.6, 1.2)
                double3 xformOp:translate = (-666.6881383975336, -243.7201995039083, 28.1921)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "LightBollard_05" (
                prepend references = @../Bollards/LightBollards.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -230.90000344067812)
                double3 xformOp:scale = (0.6, 0.6, 1.2)
                double3 xformOp:translate = (-667.4713253815082, -242.7314772082672, 28.1921)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Cobble" (
                prepend references = @./CC_MainAvenue_Median01_01_Cobble.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "GutterCorner_004"
                {
                    over "Plane_065" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_D0A161F47F632BEE/CobbleMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Material "CobbleMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_D0A161F47F632BEE/CobbleMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_D0A161F47F632BEE/CobbleMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_D0A161F47F632BEE/CobbleMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./cobble_albedo.dds@ (
                        colorSpace = "sRGB"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel\r\r\r
\r\r\r
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:displace_in = 0.01
                    asset inputs:height_texture = @./cobble_height.dds@ (
                        colorSpace = "raw"
                    )
                    asset inputs:normalmap_texture = @./cobble_normal.dds@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./cobble_roughness.dds@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }
        }

        over "mesh_CAAEE38D85D12ACA"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_53506B17A7475104"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Material "ConcreteWalls"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_53506B17A7475104/ConcreteWalls/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_53506B17A7475104/ConcreteWalls/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_53506B17A7475104/ConcreteWalls/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./concrete_foundation_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @./concrete_foundation_normals.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./concrete_foundation_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "Walls" (
                prepend references = @./CC_MainAvenue_Median01_02_Walls.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CC_M02_02_Walls"
                {
                    over "mesh_1605" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_53506B17A7475104/ConcreteWalls> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Material "TopFencesMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_53506B17A7475104/TopFencesMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_53506B17A7475104/TopFencesMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_53506B17A7475104/TopFencesMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./cast_iron_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:metallic_constant = 1 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Specular"
                        displayName = "Metallic Amount"
                        doc = "Metallic Material"
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @./cast_iron_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./cast_iron_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "TopFences" (
                prepend references = @./CC_MainAvenue_Median01_02_TopFences.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CC_M02_02_WallsTopFences"
                {
                    over "Cube_023" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_53506B17A7475104/TopFencesMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Xform "GrassTop" (
                prepend references = @./CC_MainAvenue_Median01_02_GrassTop.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CC_M02_02_GrassTop"
                {
                    over "mesh_1607" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_53506B17A7475104/SidewalkMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Xform "RaphisExcelsaPalms" (
                prepend references = @./CC_MainAvenue_Median01_02_RaphisExcelsaPalms.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CC_M02_02_RhapisExcelsaPalm"
                {
                    over "Cube_025" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_53506B17A7475104/RaphisPalmsMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Material "RaphisPalmsMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_53506B17A7475104/RaphisPalmsMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_53506B17A7475104/RaphisPalmsMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_53506B17A7475104/RaphisPalmsMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    bool inputs:blend_enabled = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Material Flags"
                        displayName = "Blend Enabled"
                        doc = """Indicates if alpha state blending should be enabled.\r
\r
"""
                        hidden = false
                    )
                    asset inputs:diffuse_texture = @./raphis_palm_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel\r
\r
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @./raphis_palm_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./raphis_palm_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:subsurface_measurement_distance = 0.78999996 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 16
                                float min = 0
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Measurement Distance"
                        doc = """The distance between front and back surface of subsurface materials in millimeter, or the thickness of the surface.\r
This parameter is unused.\r
"""
                        hidden = false
                    )
                    color3f inputs:subsurface_single_scattering_albedo = (1, 0.96, 0) (
                        customData = {
                            float3 default = (0.5, 0.5, 0.5)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Single Scattering Albedo"
                        doc = """The color of light that most easily passes through the material after a single time scattering inside volume.\r
This parameter is unused.\r
"""
                        hidden = false
                        renderType = "color"
                    )
                    color3f inputs:subsurface_transmittance_color = (0.11, 0.13, 0.96) (
                        customData = {
                            float3 default = (0.5, 0.5, 0.5)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Transmittance Color"
                        doc = """The transmittance color of subsurface materials. This property can be easily considered as the light color after passing through volume.\r
This parameter is unused.\r
"""
                        hidden = false
                        renderType = "color"
                    )
                    float inputs:subsurface_volumetric_anisotropy = 0.19999999 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 0.99
                                float min = -0.99
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Volumetric Anisotropy"
                        doc = """The anisotropy of the scattering phase function. 0.99 = light mostly passes straight through (forward), 0 = light spreads a lot (diffuse), -0.99 = light mostly reflects (backward).\r
This parameter is unused.\r
"""
                        hidden = false
                    )
                    bool inputs:use_legacy_alpha_state = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Material Flags"
                        displayName = "Use Legacy Alpha State"
                        doc = """Indicates if the alpha state should be derived from legacy information (the drawcall), or specified in the MDL.\r
\r
"""
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "GrassTopCover" (
                prepend references = @./CC_MainAvenue_Median01_02_GrassTopCover.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CC_M02_02_GrassTopCover"
                {
                    over "mesh_1606" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_53506B17A7475104/GrassTopCoverMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Material "GrassTopCoverMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_53506B17A7475104/GrassTopCoverMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_53506B17A7475104/GrassTopCoverMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_53506B17A7475104/GrassTopCoverMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    bool inputs:blend_enabled = 1 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Material Flags"
                        displayName = "Blend Enabled"
                        doc = """Indicates if alpha state blending should be enabled.\r\r\r
\r\r\r
"""
                        hidden = false
                    )
                    int inputs:blend_type = 0 (
                        customData = {
                            int default = 0
                        }
                        displayGroup = "Material Flags"
                        displayName = "Blend Type"
                        doc = """The alpha state blend type to use.\r\r\r
This parameter is unused.\r\r\r
"""
                        hidden = false
                        renderType = "BlendType"
                        sdrMetadata = {
                            string __SDR__enum_value = "Alpha"
                            string options = "Alpha:0|AlphaEmissive:1|ReverseAlphaEmissive:2|Color:3|ColorEmissive:4|ReverseColorEmissive:5|Emissive:6|Multiplicative:7|DoubleMultiplicative:8"
                        }
                    )
                    asset inputs:diffuse_texture = @./leaves_albedo.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel\r\r\r
\r\r\r
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @./leaves_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./leaves_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    bool inputs:use_legacy_alpha_state = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Material Flags"
                        displayName = "Use Legacy Alpha State"
                        doc = """Indicates if the alpha state should be derived from legacy information (the drawcall), or specified in the MDL.\r\r\r
\r\r\r
"""
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "Sidewalk" (
                prepend references = @./CC_MainAvenue_Median01_02.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "GutterCorner_003"
                {
                    over "Plane_064" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_53506B17A7475104/SidewalkMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Material "SidewalkMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_53506B17A7475104/SidewalkMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_53506B17A7475104/SidewalkMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_53506B17A7475104/SidewalkMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./sidewalk_grass_albedo.dds@ (
                        colorSpace = "sRGB"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel\r\r\r
\r\r\r
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @./sidewalk_grass_normal.dds@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./sidewalk_grass_roughness.dds@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "GuardRails" (
                prepend references = @./CC_MainAvenue_Median01_02_GuardRails.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "RetroReflectors"
                {
                    over "Cube" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_53506B17A7475104/GuardRailsMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }

                over "RetroReflectors_001"
                {
                    over "Cube_022" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_53506B17A7475104/GuardRailsRetroreflectorsMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Material "GuardRailsMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_53506B17A7475104/GuardRailsMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_53506B17A7475104/GuardRailsMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_53506B17A7475104/GuardRailsMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @../GuardRails/albedo.dds@ (
                        colorSpace = "sRGB"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel\r\r\r
\r\r\r
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:metallic_texture = @../GuardRails/metallic.dds@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Metallic Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @../GuardRails/roughness.dds@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Material "GuardRailsRetroreflectorsMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_53506B17A7475104/GuardRailsRetroreflectorsMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_53506B17A7475104/GuardRailsRetroreflectorsMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_53506B17A7475104/GuardRailsRetroreflectorsMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @../GuardRails/RetroReflective_albedo.dds@ (
                        colorSpace = "sRGB"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel\r\r\r
\r\r\r
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:emissive_intensity = 3 (
                        customData = {
                            float default = 40
                            dictionary range = {
                                float max = 65504
                                float min = 0
                            }
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Intensity"
                        doc = """Intensity of the emission\r\r\r
\r\r\r
"""
                        hidden = false
                    )
                    asset inputs:emissive_mask_texture = @../GuardRails/RetroReflective_emissive.dds@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Mask Map"
                        doc = """The texture masking the emissive color\r\r\r
\r\r\r
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    bool inputs:enable_emission = 1 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Emissive"
                        displayName = "Enable Emission"
                        doc = """Enables the emission of light from the material\r\r\r
\r\r\r
"""
                        hidden = false
                    )
                    asset inputs:metallic_texture = @../GuardRails/Retrorefelctive_metallic.dds@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Metallic Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @../GuardRails/RetroReflective_roughness.dds@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "CastIronFences" (
                prepend references = @./CC_MainAvenue_Median01_02_CastIronFences.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "CC_M02_01_CastIronFences_001"
                {
                    over "Cube_003" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_53506B17A7475104/CastIronMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Material "CastIronMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_53506B17A7475104/CastIronMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_53506B17A7475104/CastIronMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_53506B17A7475104/CastIronMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./cast_iron_albedo.dds@ (
                        colorSpace = "sRGB"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel\r\r\r
\r\r\r
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:metallic_constant = 1 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Specular"
                        displayName = "Metallic Amount"
                        doc = """Metallic Material\r\r\r
\r\r\r
"""
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @./cast_iron_fences_normals.dds@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:reflection_roughness_constant = 0.17999999 (
                        customData = {
                            float default = 0.5
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Amount"
                        doc = """Higher roughness values lead to more blurry reflections\r\r\r
\r\r\r
"""
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "LightBollard_06" (
                prepend references = @../Bollards/LightBollards.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -399.0851869576355)
                double3 xformOp:scale = (0.6, 0.6, 1.2)
                double3 xformOp:translate = (-715.0795038307706, -199.3513241588699, 28.859413359012095)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "LightBollard_07" (
                prepend references = @../Bollards/LightBollards.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -578.0801062047653)
                double3 xformOp:scale = (0.6, 0.6, 1.2)
                double3 xformOp:translate = (-713.0907323153139, -196.55203252447808, 28.859413359014525)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_80CC6891722E6540"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_700A1C5657227D7F"
        {
            over "mesh" (
                active = false
            )
            {
            }

            def Material "SidewalkMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_700A1C5657227D7F/SidewalkMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_700A1C5657227D7F/SidewalkMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_700A1C5657227D7F/SidewalkMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./sidewalk_grass_albedo.dds@ (
                        colorSpace = "sRGB"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel\r\r
\r\r
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @./sidewalk_grass_normal.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./sidewalk_grass_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "Sidewalk" (
                prepend references = @./CC_MainAvenue_Median03_01.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "SidewalkStraight_001"
                {
                    over "Plane_007" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_700A1C5657227D7F/SidewalkMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Xform "Walls" (
                prepend references = @./CC_MainAvenue_Median03_01_Walls.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Base_001"
                {
                    over "mesh_001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_700A1C5657227D7F/WallsMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            def Material "WallsMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_700A1C5657227D7F/WallsMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_700A1C5657227D7F/WallsMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_700A1C5657227D7F/WallsMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @./concrete_foundation_albedo.dds@ (
                        colorSpace = "sRGB"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel\r\r
\r\r
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @./concrete_foundation_normals.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./concrete_foundation_roughness.dds@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Material "GrassTopMat"
            {
                token outputs:mdl:displacement.connect = </RootNode/meshes/mesh_700A1C5657227D7F/GrassTopMat/Shader.outputs:out>
                token outputs:mdl:surface.connect = </RootNode/meshes/mesh_700A1C5657227D7F/GrassTopMat/Shader.outputs:out>
                token outputs:mdl:volume.connect = </RootNode/meshes/mesh_700A1C5657227D7F/GrassTopMat/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    asset inputs:diffuse_texture = @../../../../02_materials/03_global/03_vegetation/grass_soil_albedo.dds@ (
                        colorSpace = "sRGB"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel\r\r
\r\r
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:displace_in = 0.015 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 255
                                float min = 0
                            }
                        }
                        displayGroup = "Displacement"
                        displayName = "Inwards Displacement"
                        doc = """Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep.\r\r
This parameter is unused.\r\r
"""
                        hidden = false
                    )
                    asset inputs:height_texture = @../../../../02_materials/03_global/03_vegetation/grass_soil_height.dds@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Displacement"
                        displayName = "Height Map"
                        doc = """A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point.\r\r
This parameter is unused.\r\r
"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @../../../../02_materials/03_global/03_vegetation/grass_soil_normals.dds@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @../../../../02_materials/03_global/03_vegetation/grass_soil_roughness.dds@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Xform "GrassTop" (
                prepend references = @./CC_MainAvenue_Median03_01_GrassTop.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Base_002"
                {
                    over "mesh_002" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </RootNode/meshes/mesh_700A1C5657227D7F/GrassTopMat> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }
        }

        over "mesh_17A5F269BFF1EF13"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_4CF1FCC7A23905FE"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }
    }
}

