#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (50000, 0, 0)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (2.856683228400268, 2.655698213414202, 1.7352025164380611)
                double3 target = (-8.195656919220552, -8.150553747390308, 0.4882390676371249)
            }
            dictionary Right = {
                double3 position = (0, -50000, 0)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (0, 0, 50000)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary navmeshSettings = {
            double agentHeight = 180
            double agentRadius = 20
            bool excludeRigidBodies = 1
            int ver = 1
            double voxelCeiling = 460
        }
        dictionary omni_layer = {
            string authoring_layer = "./ConcreteFlowerVase_Dracenas.usda"
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:index:regionOfInterestMax" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMin" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_position" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_reflectivity" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_rotation_axis" = (3.4028235e38, 3.4028235e38, 3.4028235e38)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            double "rtx:post:lensFlares:flareScale" = 0.075
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0, 0, 0)
        }
    }
    defaultPrim = "Dracenas"
    endTimeCode = 100
    metersPerUnit = 0.01
    startTimeCode = 0
    timeCodesPerSecond = 60
    upAxis = "Z"
)

def Xform "Dracenas" (
    references = @./ConcreteFlowerVase_Dracenas.usd@
)
{
    double3 xformOp:rotateXYZ = (0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

    over "ConcreteFlowerVaseDracenas"
    {
        over "ConcreteFlowerVaseDracenasMesh" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Dracenas/ConcreteFlowerVaseDracenas/ConcreteFlowerVaseDracenasMesh/AperturePBR_Opacity_0> (
                bindMaterialAs = "weakerThanDescendants"
            )

            def Material "AperturePBR_Opacity_0"
            {
                token outputs:mdl:displacement.connect = </Dracenas/ConcreteFlowerVaseDracenas/ConcreteFlowerVaseDracenasMesh/AperturePBR_Opacity_0/Shader.outputs:out>
                token outputs:mdl:surface.connect = </Dracenas/ConcreteFlowerVaseDracenas/ConcreteFlowerVaseDracenasMesh/AperturePBR_Opacity_0/Shader.outputs:out>
                token outputs:mdl:volume.connect = </Dracenas/ConcreteFlowerVaseDracenas/ConcreteFlowerVaseDracenasMesh/AperturePBR_Opacity_0/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                    bool inputs:blend_enabled = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Material Flags"
                        displayName = "Blend Enabled"
                        doc = """Indicates if alpha state blending should be enabled.

"""
                        hidden = false
                    )
                    asset inputs:diffuse_texture = @./MexicanFanPalmBark_Albedo.dds@ (
                        colorSpace = "sRGB"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Diffuse"
                        displayName = "Albedo Map"
                        doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @./MexicanFanPalmBark_normal.dds@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:reflectionroughness_texture = @./MexicanFanPalmBark_Roughness.dds@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Specular"
                        displayName = "Roughness Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:subsurface_measurement_distance = 0.71 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 16
                                float min = 0
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Measurement Distance"
                        doc = """The distance between front and back surface of subsurface materials in millimeter, or the thickness of the surface.
This parameter is unused.
"""
                        hidden = false
                    )
                    color3f inputs:subsurface_single_scattering_albedo = (0.95, 1, 0.089999996) (
                        customData = {
                            float3 default = (0.5, 0.5, 0.5)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Single Scattering Albedo"
                        doc = """The color of light that most easily passes through the material after a single time scattering inside volume.
This parameter is unused.
"""
                        hidden = false
                        renderType = "color"
                    )
                    color3f inputs:subsurface_transmittance_color = (0.14999999, 0.16, 0.93) (
                        customData = {
                            float3 default = (0.5, 0.5, 0.5)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Transmittance Color"
                        doc = """The transmittance color of subsurface materials. This property can be easily considered as the light color after passing through volume.
This parameter is unused.
"""
                        hidden = false
                        renderType = "color"
                    )
                    float inputs:subsurface_volumetric_anisotropy = 0.29999998 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 0.99
                                float min = -0.99
                            }
                        }
                        displayGroup = "Subsurface"
                        displayName = "Subsurface Volumetric Anisotropy"
                        doc = """The anisotropy of the scattering phase function. 0.99 = light mostly passes straight through (forward), 0 = light spreads a lot (diffuse), -0.99 = light mostly reflects (backward).
This parameter is unused.
"""
                        hidden = false
                    )
                    bool inputs:use_legacy_alpha_state = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Material Flags"
                        displayName = "Use Legacy Alpha State"
                        doc = """Indicates if the alpha state should be derived from legacy information (the drawcall), or specified in the MDL.

"""
                        hidden = false
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }
        }
    }
}

