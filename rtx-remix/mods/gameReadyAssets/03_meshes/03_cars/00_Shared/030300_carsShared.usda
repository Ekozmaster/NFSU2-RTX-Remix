#usda 1.0
(
    customLayerData = {
        dictionary omni_layer = {
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
    }
    upAxis = "Z"
)

over "Looks"
{
    def Material "Glass_Clear"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Clear/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Clear/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Clear/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.5999999 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = "Index of Refraction of the material"
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Red"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Red/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Red/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Red/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.5999999 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = "Index of Refraction of the material"
                hidden = false
            )
            color3f inputs:transmittance_color = (1, 0, 0) (
                customData = {
                    float3 default = (0.97, 0.97, 0.97)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color"
                doc = "Expected transmittance after the specified transmittance distance through the volume."
                hidden = false
            )
            float inputs:transmittance_measurement_distance = 0.1 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 65504
                        float min = 0.001
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Measurement Distance"
                doc = "Distance to match the transmittance through the volume at."
                hidden = false
            )
            asset inputs:transmittance_texture = @./glass_red_albedo.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color/Diffuse Albedo Texture"
                doc = "Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer"
                hidden = false
            )
            bool inputs:use_diffuse_layer = 0 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Volume"
                displayName = "Use diffuse layer"
                doc = "When set, simulates a diffuse layer on top of the material"
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Orange"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Orange/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Orange/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Orange/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.5999999 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = "Index of Refraction of the material"
                hidden = false
            )
            color3f inputs:transmittance_color = (0.97, 0.97, 0.97) (
                customData = {
                    float3 default = (0.97, 0.97, 0.97)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color"
                doc = "Expected transmittance after the specified transmittance distance through the volume."
                hidden = false
            )
            float inputs:transmittance_measurement_distance = 0.001 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 65504
                        float min = 0.001
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Measurement Distance"
                doc = "Distance to match the transmittance through the volume at."
                hidden = false
            )
            asset inputs:transmittance_texture = @./glass_orange_albedo.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color/Diffuse Albedo Texture"
                doc = "Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer"
                hidden = false
            )
            bool inputs:use_diffuse_layer = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Volume"
                displayName = "Use diffuse layer"
                doc = "When set, simulates a diffuse layer on top of the material"
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Yellow"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Yellow/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Yellow/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Yellow/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.5999999 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = "Index of Refraction of the material"
                hidden = false
            )
            color3f inputs:transmittance_color = (0.97, 0.97, 0.97) (
                customData = {
                    float3 default = (0.97, 0.97, 0.97)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color"
                doc = "Expected transmittance after the specified transmittance distance through the volume."
                hidden = false
            )
            float inputs:transmittance_measurement_distance = 0.001 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 65504
                        float min = 0.001
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Measurement Distance"
                doc = "Distance to match the transmittance through the volume at."
                hidden = false
            )
            asset inputs:transmittance_texture = @./glass_yellow_albedo.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color/Diffuse Albedo Texture"
                doc = "Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer"
                hidden = false
            )
            bool inputs:use_diffuse_layer = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Volume"
                displayName = "Use diffuse layer"
                doc = "When set, simulates a diffuse layer on top of the material"
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Chrome"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Chrome/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Chrome/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Chrome/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = "The base albedo color.  (Used if no texture is specified)"
                hidden = false
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = "How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified)."
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified)."
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = "The base albedo color.  (Used if no texture is specified)"
                hidden = false
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = "How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified)."
                hidden = false
            )
            asset inputs:normalmap_texture = @./Reflector_Combined_normal.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified)."
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_and_Height"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_and_Height/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_and_Height/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_and_Height/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Base Color"
                doc = "The base albedo color to use if no texture is specified"
                hidden = false
            )
            float inputs:displace_in = 0.05 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 255
                        float min = 0
                    }
                }
                displayGroup = "Displacement"
                displayName = "Inwards Displacement"
                doc = "Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep."
                hidden = false
            )
            asset inputs:height_texture = @./Reflector_Combined_height.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Displacement"
                displayName = "Height Map"
                doc = "A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point."
                hidden = false
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
                hidden = false
            )
            asset inputs:normalmap_texture = @./Reflector_Combined_normal.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Type_01"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Type_01/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Type_01/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Type_01/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Base Color"
                doc = "The base albedo color to use if no texture is specified"
                hidden = false
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
                hidden = false
            )
            asset inputs:normalmap_texture = @./Reflector_type_01_normal.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Type_02"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Type_02/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Type_02/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Type_02/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = "The base albedo color.  (Used if no texture is specified)"
                hidden = false
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = "How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified)."
                hidden = false
            )
            asset inputs:normalmap_texture = @./Reflector_type_02_normal.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified)."
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Type_03"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Type_03/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Type_03/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Type_03/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Base Color"
                doc = "The base albedo color to use if no texture is specified"
                hidden = false
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
                hidden = false
            )
            asset inputs:normalmap_texture = @./Reflector_type_03_normal.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Type_04"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Type_04/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Type_04/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Type_04/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Base Color"
                doc = "The base albedo color to use if no texture is specified"
                hidden = false
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
                hidden = false
            )
            asset inputs:normalmap_texture = @./Reflector_type_04_normal.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Type_05"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Type_05/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Type_05/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Type_05/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Base Color"
                doc = "The base albedo color to use if no texture is specified"
                hidden = false
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
                hidden = false
            )
            asset inputs:normalmap_texture = @./Reflector_type_05_normal.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Type_06"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Type_06/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Type_06/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Type_06/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Base Color"
                doc = "The base albedo color to use if no texture is specified"
                hidden = false
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
                hidden = false
            )
            asset inputs:normalmap_texture = @./Reflector_type_06_normal.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Type_07"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Type_07/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Type_07/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Type_07/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Base Color"
                doc = "The base albedo color to use if no texture is specified"
                hidden = false
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
                hidden = false
            )
            asset inputs:normalmap_texture = @./Reflector_type_07_normal.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Type_08"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Type_08/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Type_08/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Type_08/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Base Color"
                doc = "The base albedo color to use if no texture is specified"
                hidden = false
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
                hidden = false
            )
            asset inputs:normalmap_texture = @./Reflector_type_08_normal.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Type_09"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Type_09/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Type_09/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Type_09/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Base Color"
                doc = "The base albedo color to use if no texture is specified"
                hidden = false
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
                hidden = false
            )
            asset inputs:normalmap_texture = @./Reflector_type_09_normal.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Type_10"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Type_10/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Type_10/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Type_10/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Base Color"
                doc = "The base albedo color to use if no texture is specified"
                hidden = false
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
                hidden = false
            )
            asset inputs:normalmap_texture = @./Reflector_type_10_normal.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Type_11"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Type_11/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Type_11/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Type_11/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Base Color"
                doc = "The base albedo color to use if no texture is specified"
                hidden = false
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
                hidden = false
            )
            asset inputs:normalmap_texture = @./Reflector_type_11_normal.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Chrome_Shiny"
    {
        token outputs:mdl:displacement.connect = </Looks/Chrome_Shiny/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Chrome_Shiny/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Chrome_Shiny/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = "The base albedo color.  (Used if no texture is specified)"
                hidden = false
            )
            float inputs:metallic_constant = 0.79999995 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = "How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified)."
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0.099999994 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified)."
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Chrome_Rough"
    {
        token outputs:mdl:displacement.connect = </Looks/Chrome_Rough/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Chrome_Rough/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Chrome_Rough/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = "The base albedo color.  (Used if no texture is specified)"
                hidden = false
            )
            float inputs:metallic_constant = 0.79999995 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = "How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified)."
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0.19999999 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified)."
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Chrome_More_Rough"
    {
        token outputs:mdl:displacement.connect = </Looks/Chrome_More_Rough/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Chrome_More_Rough/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Chrome_More_Rough/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.6, 0.6, 0.6) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = "The base albedo color.  (Used if no texture is specified)"
                hidden = false
            )
            float inputs:metallic_constant = 0.79999995 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = "How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified)."
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified)."
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "License_Plate"
    {
        token outputs:mdl:displacement.connect = </Looks/License_Plate/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/License_Plate/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/License_Plate/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            asset inputs:diffuse_texture = @./License_Plate_albedo.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Albedo/Opacity Map"
                doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:displace_in = 0.02 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 255
                        float min = 0
                    }
                }
                displayGroup = "Displacement"
                displayName = "Inwards Displacement"
                doc = """Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep.
This parameter is unused.
"""
                hidden = false
            )
            asset inputs:height_texture = @./License_Plate_height.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Displacement"
                displayName = "Height Map"
                doc = """A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point.
This parameter is unused.
"""
                hidden = false
                renderType = "texture_2d"
            )
            asset inputs:metallic_texture = @./License_Plate_metal.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Metallic Map"
                hidden = false
                renderType = "texture_2d"
            )
            asset inputs:normalmap_texture = @./License_Plate_normal.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            asset inputs:reflectionroughness_texture = @./License_Plate_rough.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Roughness Map"
                doc = """A single channel texture defining roughness per texel.  Higher roughness values lead to more blurry reflections.

"""
                hidden = false
                renderType = "texture_2d"
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }
}

over "RootNode"
{
    over "meshes"
    {
        over "mesh_3FEFE8898D689011" (
            prepend apiSchemas = ["MaterialBindingAPI"]
            references = None
        )
        {
            rel material:binding = </RootNode/Looks/mat_97BC23F491F11F6C> (
                bindMaterialAs = "weakerThanDescendants"
            )
            custom int preserveOriginalDrawCall = 0

            def Xform "License_Plate" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = @./License Plate.usd@
            )
            {
                rel material:binding = </Looks/License_Plate> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }
    }
}

