#usda 1.0
(
    upAxis = "Y"
)

over "RootNode"
{
    over "Looks"
    {
        over "mat_721BC07DBC40ED33"
        {
            over "Shader"
            {
                uniform bool enable_opacity = 1
                asset inputs:diffuse_texture = @./Textures/cars/mesh_01_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                bool inputs:enable_thin_film = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Diffuse"
                    displayName = "Enable thin film"
                    doc = "Adds a thin film coating to the material"
                    hidden = false
                )
                float inputs:metallic_constant = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                asset inputs:metallic_texture = @./Textures/cars/mesh_metal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Textures/cars/mesh_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./Textures/cars/mesh_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_B83A4338043A9332"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./Textures/cars/mesh_02_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:metallic_constant = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                asset inputs:metallic_texture = @./Textures/cars/mesh_metal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Textures/cars/mesh_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./Textures/cars/mesh_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_C8D3FF1CD4BBB644"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./Textures/cars/carbon fiber_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                bool inputs:enable_thin_film = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Diffuse"
                    displayName = "Enable thin film"
                    doc = "Adds a thin film coating to the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Textures/cars/carbon fiber_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./Textures/cars/carbon fiber_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_0BCC830636B17A21"
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @../../captures/materials/AperturePBR_Translucent.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                float inputs:ior_constant = 1.56 (
                    customData = {
                        float default = 1.3
                        dictionary range = {
                            float max = 3
                            float min = 1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Index of Refraction"
                    doc = "Index of Refraction of the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Textures/cars/headlight_rect_normal.dds@ (
                    hidden = false
                )
                bool inputs:thin_walled = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled"
                    doc = "Whether the material is thin-walled"
                    hidden = false
                )
                asset inputs:transmittance_texture = @./Textures/cars/0BCC830636B17A21_albedo.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance or Diffuse Albedo Texture"
                    doc = "Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer"
                    hidden = false
                )
                bool inputs:use_diffuse_layer = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Volume"
                    displayName = "Use diffuse layer"
                    doc = "When set, simulates a diffuse layer on top of the material"
                    hidden = false
                )
            }
        }

        over "mat_8003A66ECAC6C1C0"
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @../../captures/materials/AperturePBR_Translucent.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                float inputs:ior_constant = 1.56 (
                    customData = {
                        float default = 1.3
                        dictionary range = {
                            float max = 3
                            float min = 1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Index of Refraction"
                    doc = "Index of Refraction of the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Textures/cars/headlight_sqaure_normal.dds@ (
                    hidden = false
                )
                bool inputs:thin_walled = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled"
                    doc = "Whether the material is thin-walled"
                    hidden = false
                )
                asset inputs:transmittance_texture = @./Textures/cars/8003A66ECAC6C1C0_albedo.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance or Diffuse Albedo Texture"
                    doc = "Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer"
                    hidden = false
                )
                bool inputs:use_diffuse_layer = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Volume"
                    displayName = "Use diffuse layer"
                    doc = "When set, simulates a diffuse layer on top of the material"
                    hidden = false
                )
            }
        }

        over "mat_575F9FC98E654BD2"
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @../../captures/materials/AperturePBR_Translucent.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                float inputs:ior_constant = 1.56 (
                    customData = {
                        float default = 1.3
                        dictionary range = {
                            float max = 3
                            float min = 1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Index of Refraction"
                    doc = "Index of Refraction of the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Textures/cars/headlight_rect_normal.dds@ (
                    hidden = false
                )
                bool inputs:thin_walled = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled"
                    doc = "Whether the material is thin-walled"
                    hidden = false
                )
                asset inputs:transmittance_texture = @./Textures/cars/575F9FC98E654BD2_albedo.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance or Diffuse Albedo Texture"
                    doc = "Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer"
                    hidden = false
                )
                bool inputs:use_diffuse_layer = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Volume"
                    displayName = "Use diffuse layer"
                    doc = "When set, simulates a diffuse layer on top of the material"
                    hidden = false
                )
            }
        }

        over "mat_0D9D8D4B5D31C283"
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @../../captures/materials/AperturePBR_Translucent.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                float inputs:ior_constant = 1.56 (
                    customData = {
                        float default = 1.3
                        dictionary range = {
                            float max = 3
                            float min = 1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Index of Refraction"
                    doc = "Index of Refraction of the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Textures/cars/0D9D8D4B5D31C283_normal.dds@ (
                    hidden = false
                )
                bool inputs:thin_walled = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled"
                    doc = "Whether the material is thin-walled"
                    hidden = false
                )
                asset inputs:transmittance_texture = @./Textures/cars/0D9D8D4B5D31C283_albedo.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance or Diffuse Albedo Texture"
                    doc = "Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer"
                    hidden = false
                )
                bool inputs:use_diffuse_layer = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Volume"
                    displayName = "Use diffuse layer"
                    doc = "When set, simulates a diffuse layer on top of the material"
                    hidden = false
                )
            }
        }

        over "mat_0F4BA985574F80E7"
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @../../captures/materials/AperturePBR_Translucent.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                float inputs:ior_constant = 1.56 (
                    customData = {
                        float default = 1.3
                        dictionary range = {
                            float max = 3
                            float min = 1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Index of Refraction"
                    doc = "Index of Refraction of the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Textures/cars/0F4BA985574F80E7_normal.dds@ (
                    hidden = false
                )
                bool inputs:thin_walled = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled"
                    doc = "Whether the material is thin-walled"
                    hidden = false
                )
                asset inputs:transmittance_texture = @./Textures/cars/0F4BA985574F80E7_albedo.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance or Diffuse Albedo Texture"
                    doc = "Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer"
                    hidden = false
                )
                bool inputs:use_diffuse_layer = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Volume"
                    displayName = "Use diffuse layer"
                    doc = "When set, simulates a diffuse layer on top of the material"
                    hidden = false
                )
            }
        }

        over "mat_962D9AF91D2B4709"
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @../../captures/materials/AperturePBR_Translucent.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                asset inputs:diffuse_texture = @@
                float inputs:ior_constant = 1.56 (
                    customData = {
                        float default = 1.3
                        dictionary range = {
                            float max = 3
                            float min = 1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Index of Refraction"
                    doc = "Index of Refraction of the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Textures/cars/headlight_sqaure_normal.dds@
                bool inputs:thin_walled = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled"
                    doc = "Whether the material is thin-walled"
                    hidden = false
                )
                asset inputs:transmittance_texture = @./Textures/cars/962D9AF91D2B4709_albedo.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance or Diffuse Albedo Texture"
                    doc = "Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer"
                    hidden = false
                )
                bool inputs:use_diffuse_layer = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Volume"
                    displayName = "Use diffuse layer"
                    doc = "When set, simulates a diffuse layer on top of the material"
                    hidden = false
                )
            }
        }

        over "mat_D00C2D2017E71506"
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @../../captures/materials/AperturePBR_Translucent.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                float inputs:ior_constant = 1.56 (
                    customData = {
                        float default = 1.3
                        dictionary range = {
                            float max = 3
                            float min = 1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Index of Refraction"
                    doc = "Index of Refraction of the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Textures/cars/headlight_sqaure_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                bool inputs:thin_walled = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled"
                    doc = "Whether the material is thin-walled"
                    hidden = false
                )
                asset inputs:transmittance_texture = @./Textures/cars/D00C2D2017E71506_albedo.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance or Diffuse Albedo Texture"
                    doc = "Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer"
                    hidden = false
                )
                bool inputs:use_diffuse_layer = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Volume"
                    displayName = "Use diffuse layer"
                    doc = "When set, simulates a diffuse layer on top of the material"
                    hidden = false
                )
            }
        }

        over "mat_4BF3ECC9E70D9A54"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./Textures/cars/4BF3ECC9E70D9A54_albedo.dds@ (
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 5 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./Textures/cars/4BF3ECC9E70D9A54_emissive.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                asset inputs:metallic_texture = @./Textures/cars/4BF3ECC9E70D9A54_metal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Textures/cars/4BF3ECC9E70D9A54_normal.dds@ (
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./Textures/cars/4BF3ECC9E70D9A54_rough.dds@ (
                    hidden = false
                )
            }
        }

        over "mat_D892EB719130ADCD"
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @../../captures/materials/AperturePBR_Translucent.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                float inputs:ior_constant = 1.56 (
                    customData = {
                        float default = 1.3
                        dictionary range = {
                            float max = 3
                            float min = 1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Index of Refraction"
                    doc = "Index of Refraction of the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Textures/cars/headlight_rect_normal.dds@ (
                    hidden = false
                )
                bool inputs:thin_walled = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled"
                    doc = "Whether the material is thin-walled"
                    hidden = false
                )
                asset inputs:transmittance_texture = @./Textures/cars/D892EB719130ADCD_albedo.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance or Diffuse Albedo Texture"
                    doc = "Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer"
                    hidden = false
                )
                bool inputs:use_diffuse_layer = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Volume"
                    displayName = "Use diffuse layer"
                    doc = "When set, simulates a diffuse layer on top of the material"
                    hidden = false
                )
            }
        }

        def Material "sliver" (
            references = @./02_materials/sliver.usda@</Looks/sliver>
        )
        {
            token outputs:mdl:displacement.connect = </RootNode/Looks/sliver/Shader.outputs:out>
            token outputs:mdl:surface.connect = </RootNode/Looks/sliver/Shader.outputs:out>
            token outputs:mdl:volume.connect = </RootNode/Looks/sliver/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @./02_materials/AperturePBR_Opacity.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                asset inputs:diffuse_texture = @./Textures/cars/sliver_albedo.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:metallic_texture = @./Textures/cars/sliver_metal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Textures/cars/sliver_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./Textures/cars/sliver_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }

        over "mat_D109F24121137DBC"
        {
            over "Shader"
            {
                float inputs:reflection_roughness_constant = 0.79999995 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
            }
        }

        over "mat_DE7E2B2A2A0428EC"
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @../../captures/materials/AperturePBR_Translucent.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                float inputs:ior_constant = 1.56 (
                    customData = {
                        float default = 1.3
                        dictionary range = {
                            float max = 3
                            float min = 1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Index of Refraction"
                    doc = "Index of Refraction of the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Textures/cars/decals/DE7E2B2A2A0428EC_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                bool inputs:thin_walled = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled"
                    doc = "Whether the material is thin-walled"
                    hidden = false
                )
                asset inputs:transmittance_texture = @./Textures/cars/decals/DE7E2B2A2A0428EC_albedo.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance or Diffuse Albedo Texture"
                    doc = "Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer"
                    hidden = false
                )
                bool inputs:use_diffuse_layer = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Volume"
                    displayName = "Use diffuse layer"
                    doc = "When set, simulates a diffuse layer on top of the material"
                    hidden = false
                )
            }
        }

        over "mat_45ED7002B7B625E7"
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @../../captures/materials/AperturePBR_Translucent.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                asset inputs:diffuse_texture = @@
                float inputs:ior_constant = 1.56 (
                    customData = {
                        float default = 1.3
                        dictionary range = {
                            float max = 3
                            float min = 1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Index of Refraction"
                    doc = "Index of Refraction of the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Textures/cars/45ED7002B7B625E7_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:thin_wall_thickness = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 65504
                            float min = 0.001
                        }
                        dictionary soft_range = {
                            float max = 1
                            float min = 0.001
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled material thickness"
                    doc = "Simulated thickness for thin-walled materials (0 disables thin-walled mode)"
                    hidden = false
                )
                bool inputs:thin_walled = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled"
                    doc = "Whether the material is thin-walled"
                    hidden = false
                )
                asset inputs:transmittance_texture = @./Textures/cars/45ED7002B7B625E7_albedo.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance or Diffuse Albedo Texture"
                    doc = "Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer"
                    hidden = false
                )
                bool inputs:use_diffuse_layer = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Volume"
                    displayName = "Use diffuse layer"
                    doc = "When set, simulates a diffuse layer on top of the material"
                    hidden = false
                )
            }
        }

        def Material "rubber" (
            references = @./02_materials/rubber.usda@</Looks/rubber>
        )
        {
            token outputs:mdl:displacement.connect = </RootNode/Looks/rubber/Shader.outputs:out>
            token outputs:mdl:surface.connect = </RootNode/Looks/rubber/Shader.outputs:out>
            token outputs:mdl:volume.connect = </RootNode/Looks/rubber/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @./02_materials/AperturePBR_Opacity.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                asset inputs:diffuse_texture = @./Textures/cars/rubber_albedo.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Textures/cars/rubber_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./Textures/cars/rubber_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }

        over "mat_79B1DE1DEC521B58"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./Textures/effect/79B1DE1DEC521B58_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                bool inputs:enable_thin_film = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Diffuse"
                    displayName = "Enable thin film"
                    doc = "Adds a thin film coating to the material"
                    hidden = false
                )
                asset inputs:metallic_texture = @./Textures/effect/79B1DE1DEC521B58_metal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Textures/effect/79B1DE1DEC521B58_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./Textures/effect/79B1DE1DEC521B58_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
            }
        }

        over "mat_052F876BEE642FD1"
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @../../captures/materials/AperturePBR_Translucent.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                asset inputs:diffuse_texture = @@
                float inputs:ior_constant = 1.56 (
                    customData = {
                        float default = 1.3
                        dictionary range = {
                            float max = 3
                            float min = 1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Index of Refraction"
                    doc = "Index of Refraction of the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Textures/cars/052F876BEE642FD1_normal.dds@
                bool inputs:thin_walled = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled"
                    doc = "Whether the material is thin-walled"
                    hidden = false
                )
                asset inputs:transmittance_texture = @./Textures/cars/052F876BEE642FD1_albedo.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance or Diffuse Albedo Texture"
                    doc = "Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer"
                    hidden = false
                )
                bool inputs:use_diffuse_layer = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Volume"
                    displayName = "Use diffuse layer"
                    doc = "When set, simulates a diffuse layer on top of the material"
                    hidden = false
                )
            }
        }

        over "mat_746E7C1E593355E7"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./Textures/effect/746E7C1E593355E7_albedo.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Textures/effect/746E7C1E593355E7_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
            }
        }

        over "mat_EFE242BC3FCA24B1"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./Textures/effect/EFE242BC3FCA24B1_albedo.dds@ (
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 50000 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./Textures/effect/EFE242BC3FCA24B1_emissive.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Textures/effect/EFE242BC3FCA24B1_albedo.dds@ (
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @@ (
                    hidden = false
                )
            }
        }

        over "mat_37BD329DA1150FE5"
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @../../captures/materials/AperturePBR_Translucent.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                float inputs:ior_constant = 1.56 (
                    customData = {
                        float default = 1.3
                        dictionary range = {
                            float max = 3
                            float min = 1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Index of Refraction"
                    doc = "Index of Refraction of the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Textures/cars/headlight_rect_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                bool inputs:thin_walled = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled"
                    doc = "Whether the material is thin-walled"
                    hidden = false
                )
                asset inputs:transmittance_texture = @./Textures/cars/37BD329DA1150FE5_albedo.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance or Diffuse Albedo Texture"
                    doc = "Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer"
                    hidden = false
                )
                bool inputs:use_diffuse_layer = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Volume"
                    displayName = "Use diffuse layer"
                    doc = "When set, simulates a diffuse layer on top of the material"
                    hidden = false
                )
            }
        }

        over "mat_893C7AB112533AB1"
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @../../captures/materials/AperturePBR_Translucent.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                float inputs:ior_constant = 1.56 (
                    customData = {
                        float default = 1.3
                        dictionary range = {
                            float max = 3
                            float min = 1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Index of Refraction"
                    doc = "Index of Refraction of the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Textures/windows/893C7AB112533AB1_normal.dds@ (
                    hidden = false
                )
                bool inputs:thin_walled = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled"
                    doc = "Whether the material is thin-walled"
                    hidden = false
                )
                asset inputs:transmittance_texture = @./Textures/windows/893C7AB112533AB1_albedo.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance or Diffuse Albedo Texture"
                    doc = "Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer"
                    hidden = false
                )
                bool inputs:use_diffuse_layer = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Volume"
                    displayName = "Use diffuse layer"
                    doc = "When set, simulates a diffuse layer on top of the material"
                    hidden = false
                )
            }
        }

        over "mat_F19650D473424DBD"
        {
            over "Shader"
            {
                float inputs:anisotropy_constant = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = -1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Anisotropy Amount"
                    doc = "0 for isotropic, extents of -1 to 1 for anisotropy"
                    hidden = false
                )
                asset inputs:diffuse_texture = @./Textures/props/F19650D473424DBD_albedo.dds@ (
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                color3f inputs:emissive_color_constant = (0.6718147, 0.49403822, 0.19713481) (
                    customData = {
                        float3 default = (1, 0.1, 0.1)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color"
                    doc = "The emissive color when no emissive color texture is specified."
                    hidden = false
                )
                float inputs:emissive_intensity = 3 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                float inputs:metallic_constant = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Textures/props/F19650D473424DBD_normal.dds@ (
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.5 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./Textures/props/F19650D473424DBD_rough.dds@ (
                    hidden = false
                )
            }
        }

        over "mat_AA8031CDDCC960FF"
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @../../captures/materials/AperturePBR_Translucent.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                float inputs:ior_constant = 1.56 (
                    customData = {
                        float default = 1.3
                        dictionary range = {
                            float max = 3
                            float min = 1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Index of Refraction"
                    doc = "Index of Refraction of the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Textures/cars/headlight_sqaure_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                bool inputs:thin_walled = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled"
                    doc = "Whether the material is thin-walled"
                    hidden = false
                )
                asset inputs:transmittance_texture = @./Textures/cars/AA8031CDDCC960FF_albedo.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance or Diffuse Albedo Texture"
                    doc = "Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer"
                    hidden = false
                )
                bool inputs:use_diffuse_layer = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Volume"
                    displayName = "Use diffuse layer"
                    doc = "When set, simulates a diffuse layer on top of the material"
                    hidden = false
                )
            }
        }

        over "mat_87B5B3A38D0372FD"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./Textures/cars/87B5B3A38D0372FD_albedo.dds@ (
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                float inputs:emissive_intensity = 40 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./Textures/cars/87B5B3A38D0372FD_emissive.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @@ (
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @@ (
                    hidden = false
                )
            }
        }

        over "mat_0A526E455D2B60AD"
        {
            over "Shader"
            {
                uniform asset info:mdl:sourceAsset = @../../captures/materials/AperturePBR_Translucent.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                float inputs:ior_constant = 1.56 (
                    customData = {
                        float default = 1.3
                        dictionary range = {
                            float max = 3
                            float min = 1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Index of Refraction"
                    doc = "Index of Refraction of the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Textures/scenery/0A526E455D2B60AD_normal.dds@ (
                    hidden = false
                )
                bool inputs:thin_walled = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled"
                    doc = "Whether the material is thin-walled"
                    hidden = false
                )
                asset inputs:transmittance_texture = @./Textures/scenery/0A526E455D2B60AD_albedo.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance or Diffuse Albedo Texture"
                    doc = "Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer"
                    hidden = false
                )
                bool inputs:use_diffuse_layer = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Volume"
                    displayName = "Use diffuse layer"
                    doc = "When set, simulates a diffuse layer on top of the material"
                    hidden = false
                )
            }
        }

        over "mat_FFBFE401755BD3E0"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./Textures/scenery/FFBFE401755BD3E0_albedo.dds@ (
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./Textures/scenery/FFBFE401755BD3E0_emissive.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @@ (
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @@ (
                    hidden = false
                )
            }
        }

        def Material "lightbulb_01"
        {
            token outputs:mdl:displacement.connect = </RootNode/Looks/lightbulb_01/Shader.outputs:out>
            token outputs:mdl:surface.connect = </RootNode/Looks/lightbulb_01/Shader.outputs:out>
            token outputs:mdl:volume.connect = </RootNode/Looks/lightbulb_01/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @./02_materials/AperturePBR_Opacity.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                asset inputs:diffuse_texture = @./Textures/cars/taillights/Light_blub_albedo.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                color3f inputs:emissive_color_constant = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 0.1, 0.1)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color"
                    doc = "The emissive color when no emissive color texture is specified."
                    hidden = false
                )
                float inputs:emissive_intensity = 5 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./Textures/cars/taillights/Light_blub_emissive.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Textures/cars/taillights/Light_blub_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./Textures/cars/taillights/Light_blub_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }

        def Material "Taillight_Glass_Red"
        {
            token outputs:mdl:displacement.connect = </RootNode/Looks/Taillight_Glass_Red/Shader.outputs:out>
            token outputs:mdl:surface.connect = </RootNode/Looks/Taillight_Glass_Red/Shader.outputs:out>
            token outputs:mdl:volume.connect = </RootNode/Looks/Taillight_Glass_Red/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @./02_materials/AperturePBR_Translucent.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                float inputs:ior_constant = 1.5799999 (
                    customData = {
                        float default = 1.3
                        dictionary range = {
                            float max = 3
                            float min = 1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Index of Refraction"
                    doc = "Index of Refraction of the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Textures/cars/taillights/glass_vstrip_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:thin_wall_thickness = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 65504
                            float min = 0.001
                        }
                        dictionary soft_range = {
                            float max = 1
                            float min = 0.001
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled material thickness"
                    doc = "Simulated thickness for thin-walled materials (0 disables thin-walled mode)"
                    hidden = false
                )
                bool inputs:thin_walled = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled"
                    doc = "Whether the material is thin-walled"
                    hidden = false
                )
                asset inputs:transmittance_texture = @./Textures/cars/taillights/glass_red_albedo.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance or Diffuse Albedo Texture"
                    doc = "Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer"
                    hidden = false
                )
                bool inputs:use_diffuse_layer = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Volume"
                    displayName = "Use diffuse layer"
                    doc = "When set, simulates a diffuse layer on top of the material"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }

        def Material "Taillight_Glass_Yellow"
        {
            token outputs:mdl:displacement.connect = </RootNode/Looks/Taillight_Glass_Yellow/Shader.outputs:out>
            token outputs:mdl:surface.connect = </RootNode/Looks/Taillight_Glass_Yellow/Shader.outputs:out>
            token outputs:mdl:volume.connect = </RootNode/Looks/Taillight_Glass_Yellow/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @./02_materials/AperturePBR_Translucent.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                float inputs:emissive_intensity = 40 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z73file_3A::Z17D_3A::Games::Z13Need_2520for_2520Speed_2520Underground_25202::Z58rtx_2Dremix::mods::gameReadyAssets::Z90_302_5Fmaterials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                bool inputs:ignore_material = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Material Flags"
                    displayName = "Ignore Material"
                    doc = "Runtime will not render any objects using an ignored material.  RTX Remix will render with a pink and black checkerboard."
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Textures/cars/taillights/glass_vstrip_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:thin_wall_thickness = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 65504
                            float min = 0.001
                        }
                        dictionary soft_range = {
                            float max = 1
                            float min = 0.001
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled material thickness"
                    doc = "Simulated thickness for thin-walled materials (0 disables thin-walled mode)"
                    hidden = false
                )
                bool inputs:thin_walled = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled"
                    doc = "Whether the material is thin-walled"
                    hidden = false
                )
                asset inputs:transmittance_texture = @./Textures/cars/taillights/glass_yellow_albedo.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance or Diffuse Albedo Texture"
                    doc = "Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer"
                    hidden = false
                )
                bool inputs:use_diffuse_layer = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Volume"
                    displayName = "Use diffuse layer"
                    doc = "When set, simulates a diffuse layer on top of the material"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }

        def Material "Taillight_Glass_Orange"
        {
            token outputs:mdl:displacement.connect = </RootNode/Looks/Taillight_Glass_Orange/Shader.outputs:out>
            token outputs:mdl:surface.connect = </RootNode/Looks/Taillight_Glass_Orange/Shader.outputs:out>
            token outputs:mdl:volume.connect = </RootNode/Looks/Taillight_Glass_Orange/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @./02_materials/AperturePBR_Translucent.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                float inputs:emissive_intensity = 40 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z73file_3A::Z17D_3A::Games::Z13Need_2520for_2520Speed_2520Underground_25202::Z58rtx_2Dremix::mods::gameReadyAssets::Z90_302_5Fmaterials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                bool inputs:ignore_material = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Material Flags"
                    displayName = "Ignore Material"
                    doc = "Runtime will not render any objects using an ignored material.  RTX Remix will render with a pink and black checkerboard."
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Textures/cars/taillights/glass_vstrip_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:thin_wall_thickness = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 65504
                            float min = 0.001
                        }
                        dictionary soft_range = {
                            float max = 1
                            float min = 0.001
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled material thickness"
                    doc = "Simulated thickness for thin-walled materials (0 disables thin-walled mode)"
                    hidden = false
                )
                bool inputs:thin_walled = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled"
                    doc = "Whether the material is thin-walled"
                    hidden = false
                )
                asset inputs:transmittance_texture = @./Textures/cars/taillights/glass_orange_albedo.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance or Diffuse Albedo Texture"
                    doc = "Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer"
                    hidden = false
                )
                bool inputs:use_diffuse_layer = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Volume"
                    displayName = "Use diffuse layer"
                    doc = "When set, simulates a diffuse layer on top of the material"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }

        def Material "Taillight_Glass_White"
        {
            token outputs:mdl:displacement.connect = </RootNode/Looks/Taillight_Glass_White/Shader.outputs:out>
            token outputs:mdl:surface.connect = </RootNode/Looks/Taillight_Glass_White/Shader.outputs:out>
            token outputs:mdl:volume.connect = </RootNode/Looks/Taillight_Glass_White/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @./02_materials/AperturePBR_Translucent.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                float inputs:emissive_intensity = 40 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z73file_3A::Z17D_3A::Games::Z13Need_2520for_2520Speed_2520Underground_25202::Z58rtx_2Dremix::mods::gameReadyAssets::Z90_302_5Fmaterials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                bool inputs:ignore_material = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Material Flags"
                    displayName = "Ignore Material"
                    doc = "Runtime will not render any objects using an ignored material.  RTX Remix will render with a pink and black checkerboard."
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Textures/cars/taillights/glass_vstrip_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:thin_wall_thickness = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 65504
                            float min = 0.001
                        }
                        dictionary soft_range = {
                            float max = 1
                            float min = 0.001
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled material thickness"
                    doc = "Simulated thickness for thin-walled materials (0 disables thin-walled mode)"
                    hidden = false
                )
                bool inputs:thin_walled = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled"
                    doc = "Whether the material is thin-walled"
                    hidden = false
                )
                asset inputs:transmittance_texture = @./Textures/cars/taillights/glass_white_albedo.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance or Diffuse Albedo Texture"
                    doc = "Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer"
                    hidden = false
                )
                bool inputs:use_diffuse_layer = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Volume"
                    displayName = "Use diffuse layer"
                    doc = "When set, simulates a diffuse layer on top of the material"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }

        def Material "Taillight_Glass_Blue2Pink"
        {
            token outputs:mdl:displacement.connect = </RootNode/Looks/Taillight_Glass_Blue2Pink/Shader.outputs:out>
            token outputs:mdl:surface.connect = </RootNode/Looks/Taillight_Glass_Blue2Pink/Shader.outputs:out>
            token outputs:mdl:volume.connect = </RootNode/Looks/Taillight_Glass_Blue2Pink/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @./02_materials/AperturePBR_Translucent.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                float inputs:emissive_intensity = 40 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z73file_3A::Z17D_3A::Games::Z13Need_2520for_2520Speed_2520Underground_25202::Z58rtx_2Dremix::mods::gameReadyAssets::Z90_302_5Fmaterials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                bool inputs:ignore_material = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Material Flags"
                    displayName = "Ignore Material"
                    doc = "Runtime will not render any objects using an ignored material.  RTX Remix will render with a pink and black checkerboard."
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Textures/cars/taillights/glass_vstrip_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:thin_wall_thickness = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 65504
                            float min = 0.001
                        }
                        dictionary soft_range = {
                            float max = 1
                            float min = 0.001
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled material thickness"
                    doc = "Simulated thickness for thin-walled materials (0 disables thin-walled mode)"
                    hidden = false
                )
                bool inputs:thin_walled = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled"
                    doc = "Whether the material is thin-walled"
                    hidden = false
                )
                asset inputs:transmittance_texture = @./Textures/cars/taillights/glass_blue2pink_albedo.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance or Diffuse Albedo Texture"
                    doc = "Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer"
                    hidden = false
                )
                bool inputs:use_diffuse_layer = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Volume"
                    displayName = "Use diffuse layer"
                    doc = "When set, simulates a diffuse layer on top of the material"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }

        def Material "Taillight_Glass_RedandWhite"
        {
            token outputs:mdl:displacement.connect = </RootNode/Looks/Taillight_Glass_RedandWhite/Shader.outputs:out>
            token outputs:mdl:surface.connect = </RootNode/Looks/Taillight_Glass_RedandWhite/Shader.outputs:out>
            token outputs:mdl:volume.connect = </RootNode/Looks/Taillight_Glass_RedandWhite/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @./02_materials/AperturePBR_Translucent.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
                float inputs:emissive_intensity = 40 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z73file_3A::Z17D_3A::Games::Z13Need_2520for_2520Speed_2520Underground_25202::Z58rtx_2Dremix::mods::gameReadyAssets::Z90_302_5Fmaterials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                bool inputs:ignore_material = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Material Flags"
                    displayName = "Ignore Material"
                    doc = "Runtime will not render any objects using an ignored material.  RTX Remix will render with a pink and black checkerboard."
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Textures/cars/taillights/glass_vstrip_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:thin_wall_thickness = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 65504
                            float min = 0.001
                        }
                        dictionary soft_range = {
                            float max = 1
                            float min = 0.001
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled material thickness"
                    doc = "Simulated thickness for thin-walled materials (0 disables thin-walled mode)"
                    hidden = false
                )
                bool inputs:thin_walled = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled"
                    doc = "Whether the material is thin-walled"
                    hidden = false
                )
                asset inputs:transmittance_texture = @./Textures/cars/taillights/glass_redandwhite_albedo.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Volume"
                    displayName = "Transmittance or Diffuse Albedo Texture"
                    doc = "Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer"
                    hidden = false
                )
                bool inputs:use_diffuse_layer = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Volume"
                    displayName = "Use diffuse layer"
                    doc = "When set, simulates a diffuse layer on top of the material"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }

        def Material "Refractor_02"
        {
            token outputs:mdl:displacement.connect = </RootNode/Looks/Refractor_02/Shader.outputs:out>
            token outputs:mdl:surface.connect = </RootNode/Looks/Refractor_02/Shader.outputs:out>
            token outputs:mdl:volume.connect = </RootNode/Looks/Refractor_02/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @./02_materials/AperturePBR_Opacity.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                float inputs:anisotropy_constant = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = -1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Anisotropy Amount"
                    doc = "0 for isotropic, extents of -1 to 1 for anisotropy"
                    hidden = false
                )
                asset inputs:anisotropy_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Anisotropy Map"
                    hidden = false
                )
                color3f inputs:diffuse_color_constant = (0.2, 0.2, 0.2) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Base Color"
                    doc = "The base albedo color to use if no texture is specified"
                    hidden = false
                )
                asset inputs:diffuse_texture = @./Textures/cars/taillights/reflector_albedo.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                color3f inputs:emissive_color_constant = (1, 0.1, 0.1) (
                    customData = {
                        float3 default = (1, 0.1, 0.1)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color"
                    doc = "The emissive color when no emissive color texture is specified."
                    hidden = false
                )
                float inputs:emissive_intensity = 40 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                bool inputs:enable_opacity = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity"
                    doc = "Enables the use of cutout opacity"
                    hidden = false
                )
                bool inputs:enable_thin_film = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Diffuse"
                    displayName = "Enable thin film"
                    doc = "Adds a thin film coating to the material"
                    hidden = false
                )
                int inputs:encoding = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Encoding"
                    doc = "Encoding type for the normal map.  Octahedral for 2 channel textures. tangent_space_dx for 3 channel normals, and tangent_space_ogl for 3 channel normals with an inverted (OpenGL style) G channel."
                    hidden = false
                    renderType = "::Z73file_3A::Z17D_3A::Games::Z13Need_2520for_2520Speed_2520Underground_25202::Z58rtx_2Dremix::mods::gameReadyAssets::Z90_302_5Fmaterials::AperturePBR_Normal::normalmap_encoding"
                    sdrMetadata = {
                        string __SDR__enum_value = "octahedral"
                        string options = "octahedral:0|tangent_space_ogl:1|tangent_space_dx:2"
                    }
                )
                bool inputs:ignore_material = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Material Flags"
                    displayName = "Ignore Material"
                    doc = "Runtime will not render any objects using an ignored material.  RTX Remix will render with a pink and black checkerboard."
                    hidden = false
                )
                float inputs:metallic_constant = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                asset inputs:metallic_texture = @./Textures/cars/taillights/reflector_metal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Textures/cars/taillights/reflector_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:opacity_constant = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Amount"
                    doc = "Used when no albedo/opacity texture is specified. 0 for completely transparent, 1 for completly opaque."
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.5 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./Textures/cars/taillights/reflector_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
                int inputs:sprite_sheet_cols = 1 (
                    customData = {
                        int default = 1
                        dictionary range = {
                            int max = 255
                            int min = 1
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Spritesheet Columns"
                    doc = "Number of columns the emissive map is divided into"
                    hidden = false
                )
                int inputs:sprite_sheet_fps = 0 (
                    customData = {
                        int default = 0
                        dictionary range = {
                            int max = 255
                            int min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Spritesheet FPS"
                    doc = "Frames Per Second if the emissive map is a spritesheet"
                    hidden = false
                )
                int inputs:sprite_sheet_rows = 1 (
                    customData = {
                        int default = 1
                        dictionary range = {
                            int max = 255
                            int min = 1
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Spritesheet Rows"
                    doc = "Number of row the emissive map is divided into"
                    hidden = false
                )
                float inputs:thin_film_thickness_constant = 200 (
                    customData = {
                        float default = 200
                        dictionary range = {
                            float max = 1500
                            float min = 0.001
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Thin film constant thickness in nm"
                    doc = "Thickness of the thin film if not specified in albedo texture"
                    hidden = false
                )
                bool inputs:thin_film_thickness_from_albedo_alpha = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Diffuse"
                    displayName = "Thin film thickness from albedo alpha"
                    doc = "Uses the alpha channel from albedo as source for the thin film thickness. Alpha value is scaled by 1500 and represents thickness in nanometers. Opacity becomes fully opaque in this case."
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }

        def Material "Refractor_01"
        {
            token outputs:mdl:displacement.connect = </RootNode/Looks/Refractor_01/Shader.outputs:out>
            token outputs:mdl:surface.connect = </RootNode/Looks/Refractor_01/Shader.outputs:out>
            token outputs:mdl:volume.connect = </RootNode/Looks/Refractor_01/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @./02_materials/AperturePBR_Opacity.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                asset inputs:diffuse_texture = @./Textures/cars/taillights/reflector_albedo.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                asset inputs:metallic_texture = @./Textures/cars/taillights/reflector_metal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./Textures/cars/taillights/reflector_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }

        def Material "lightbulb_02"
        {
            token outputs:mdl:displacement.connect = </RootNode/Looks/lightbulb_02/Shader.outputs:out>
            token outputs:mdl:surface.connect = </RootNode/Looks/lightbulb_02/Shader.outputs:out>
            token outputs:mdl:volume.connect = </RootNode/Looks/lightbulb_02/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @./02_materials/AperturePBR_Opacity.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                asset inputs:diffuse_texture = @./Textures/cars/taillights/Light_blub_albedo.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                color3f inputs:emissive_color_constant = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 0.1, 0.1)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color"
                    doc = "The emissive color when no emissive color texture is specified."
                    hidden = false
                )
                float inputs:emissive_intensity = 3 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./Textures/cars/taillights/Light_blub_emissive.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Textures/cars/taillights/Light_blub_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./Textures/cars/taillights/Light_blub_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }

        def Material "lightbulb_03"
        {
            token outputs:mdl:displacement.connect = </RootNode/Looks/lightbulb_03/Shader.outputs:out>
            token outputs:mdl:surface.connect = </RootNode/Looks/lightbulb_03/Shader.outputs:out>
            token outputs:mdl:volume.connect = </RootNode/Looks/lightbulb_03/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @./02_materials/AperturePBR_Opacity.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                asset inputs:diffuse_texture = @./Textures/cars/taillights/Light_blub_albedo.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                )
                color3f inputs:emissive_color_constant = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 0.1, 0.1)
                        dictionary range = {
                            float3 max = (1, 1, 1)
                            float3 min = (0, 0, 0)
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color"
                    doc = "The emissive color when no emissive color texture is specified."
                    hidden = false
                )
                float inputs:emissive_intensity = 0.1 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./Textures/cars/taillights/Light_blub_emissive.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./Textures/cars/taillights/Light_blub_normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./Textures/cars/taillights/Light_blub_rough.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }
    }

    over "meshes"
    {
        over "mesh_F93A7407AF328FCE" (
            references = @./03_meshes/03_cars/mesh_F93A7407AF328FCE.usd@
        )
        {
            rel material:binding = </RootNode/Looks/rubber> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "invisible"
        }

        over "mesh_ED1E3AF4FAFD00FA" (
            references = @./03_meshes/03_cars/mesh_ED1E3AF4FAFD00FA.usd@
        )
        {
            rel material:binding = </RootNode/Looks/rubber> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "invisible"
        }

        over "mesh_021DB0FD035CB7D7" (
            references = @./03_meshes/03_cars/mesh_021DB0FD035CB7D7.usd@
        )
        {
            rel material:binding = </RootNode/Looks/rubber> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "invisible"
        }

        over "mesh_D48C35C9486BFEB2" (
            references = @./03_meshes/03_cars/mesh_D48C35C9486BFEB2.usd@
        )
        {
            rel material:binding = </RootNode/Looks/rubber> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "invisible"
        }

        over "mesh_0531FC652B93323C" (
            references = @./03_meshes/03_cars/mesh_0531FC652B93323C.usd@
        )
        {
            rel material:binding = </RootNode/Looks/rubber> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "invisible"
        }

        over "mesh_96B6DC71FACBC0F6" (
            references = @./03_meshes/03_cars/mesh_96B6DC71FACBC0F6.usd@
        )
        {
            rel material:binding = </RootNode/Looks/rubber> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "invisible"
        }

        over "mesh_CE512B9F1573D180" (
            references = @./03_meshes/03_cars/mesh_CE512B9F1573D180.usd@
        )
        {
            rel material:binding = </RootNode/Looks/rubber> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "invisible"
        }

        over "mesh_565FC0E15954755E" (
            references = @./03_meshes/03_cars/mesh_565FC0E15954755E.usd@
        )
        {
            rel material:binding = </RootNode/Looks/rubber> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "invisible"
        }

        over "mesh_8E3C120045A21E19" (
            references = @./03_meshes/03_cars/mesh_8E3C120045A21E19.usd@
        )
        {
            rel material:binding = </RootNode/Looks/rubber> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "invisible"
        }

        over "mesh_1C88BC24971169E7" (
            references = @./03_meshes/03_cars/mesh_1C88BC24971169E7.usd@
        )
        {
            rel material:binding = </RootNode/Looks/rubber> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "invisible"
        }

        over "mesh_BC9E16BABBFEA8E4" (
            references = @./03_meshes/03_cars/mesh_BC9E16BABBFEA8E4.usd@
        )
        {
            rel material:binding = </RootNode/Looks/rubber> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "invisible"
        }

        over "mesh_02C2F85E2ED9CAA9" (
            references = @./03_meshes/03_cars/mesh_02C2F85E2ED9CAA9.usd@
        )
        {
            rel material:binding = </RootNode/Looks/rubber> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "invisible"
        }

        over "mesh_1D463E6212CBA51D" (
            references = @./03_meshes/03_cars/mesh_1D463E6212CBA51D.usd@
        )
        {
            rel material:binding = </RootNode/Looks/rubber> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "invisible"
        }

        over "mesh_C3EE347AFA5EBFB9" (
            references = @./03_meshes/03_cars/mesh_C3EE347AFA5EBFB9.usd@
        )
        {
            rel material:binding = </RootNode/Looks/rubber> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "invisible"
        }

        over "mesh_0C34CCA793D322E5" (
            references = @./03_meshes/03_cars/mesh_0C34CCA793D322E5.usd@
        )
        {
            rel material:binding = </RootNode/Looks/rubber> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "invisible"
        }

        over "mesh_59F597A5BE5C80FE" (
            references = @./03_meshes/03_cars/mesh_59F597A5BE5C80FE.usd@
        )
        {
            rel material:binding = </RootNode/Looks/rubber> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "invisible"
        }

        over "mesh_012408DA0E6D97DF" (
            references = @./03_meshes/03_cars/mesh_012408DA0E6D97DF.usd@
        )
        {
            rel material:binding = </RootNode/Looks/rubber> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "invisible"
        }

        over "mesh_515A9A5E28EDC847" (
            references = @./03_meshes/03_cars/mesh_515A9A5E28EDC847.usd@
        )
        {
            rel material:binding = </RootNode/Looks/rubber> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "invisible"
        }

        over "mesh_9CF1054388453A36" (
            references = @./03_meshes/03_cars/mesh_9CF1054388453A36.usd@
        )
        {
            rel material:binding = </RootNode/Looks/rubber> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "invisible"
        }

        over "mesh_9216422BFCF3AD91" (
            references = @./03_meshes/03_cars/mesh_9216422BFCF3AD91.usd@
        )
        {
            rel material:binding = </RootNode/Looks/rubber> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "invisible"
        }

        over "mesh_C14FE1EB9DAFD0C0" (
            references = @./03_meshes/03_cars/mesh_C14FE1EB9DAFD0C0.usd@
        )
        {
            rel material:binding = </RootNode/Looks/rubber> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "invisible"
        }

        over "mesh_F3570AF208427591" (
            references = @./03_meshes/03_cars/mesh_F3570AF208427591.usd@
        )
        {
            rel material:binding = </RootNode/Looks/rubber> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "invisible"
        }

        over "mesh_D786C8713E32B899" (
            references = @./03_meshes/03_cars/mesh_D786C8713E32B899.usd@
        )
        {
            rel material:binding = </RootNode/Looks/rubber> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "invisible"
        }

        over "mesh_81025799CCF3010F" (
            references = @./03_meshes/03_cars/mesh_81025799CCF3010F.usd@
        )
        {
            rel material:binding = </RootNode/Looks/rubber> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "invisible"
        }

        over "mesh_B46F83DEB3291754" (
            references = @./03_meshes/03_cars/mesh_B46F83DEB3291754.usd@
        )
        {
            rel material:binding = </RootNode/Looks/rubber> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "invisible"
        }

        over "mesh_7AF5DD1FEF038995" (
            references = @./03_meshes/03_cars/mesh_7AF5DD1FEF038995.usd@
        )
        {
            rel material:binding = </RootNode/Looks/rubber> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "invisible"
        }

        over "mesh_76B21E0E4C299625" (
            references = @./03_meshes/03_cars/mesh_76B21E0E4C299625.usd@
        )
        {
            rel material:binding = </RootNode/Looks/sliver> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "invisible"
        }

        over "mesh_A9BE430F71525B53" (
            references = @./03_meshes/03_cars/mesh_A9BE430F71525B53.usd@
        )
        {
            rel material:binding = </RootNode/Looks/sliver> (
                bindMaterialAs = "weakerThanDescendants"
            )
            token visibility = "invisible"
        }

        over "mesh_F4C2E4330F82D97D"
        {
            def Xform "Xform_F4C2E4330F82D97D_0" (
                delete references = @./03_meshes/03_cars/taillightsF4C2E4330F82D97D.usd@
                prepend references = @./03_meshes/03_cars/taillights/F4C2E4330F82D97D.usd@
            )
            {
                double3 xformOp:rotateYZX = (0, 0, -0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateYZX", "xformOp:scale"]

                over "Light_003"
                {
                    rel material:binding = </RootNode/Looks/Taillight_Glass_Orange> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }

                over "Light_001"
                {
                    rel material:binding = </RootNode/Looks/Taillight_Glass_Red> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }

                over "bulb_002"
                {
                    rel material:binding = </RootNode/Looks/lightbulb_02> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }

                over "bulb_003"
                {
                    rel material:binding = </RootNode/Looks/lightbulb_03> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }

                over "bulb_001"
                {
                    rel material:binding = </RootNode/Looks/lightbulb_01> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }

                over "Reflector"
                {
                    rel material:binding = </RootNode/Looks/Refractor_01> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }

                over "Light_002_Big"
                {
                    rel material:binding = </RootNode/Looks/Taillight_Glass_Red> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }

                over "Light_002_Small"
                {
                    rel material:binding = </RootNode/Looks/Taillight_Glass_White> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_A04303F27090BB55"
        {
            def Xform "Xform_A04303F27090BB55_0" (
                delete references = @./03_meshes/03_cars/taillightsA04303F27090BB55.usd@
                prepend references = @./03_meshes/03_cars/taillights/A04303F27090BB55.usd@
            )
            {
                double3 xformOp:rotateYZX = (0, 0, -0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateYZX", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_7DCA2EABFBD2437E"
        {
            def Xform "Xform_7DCA2EABFBD2437E_0" (
                delete references = @./03_meshes/03_cars/taillightsA04303F27090BB55.usd@
                prepend references = @./03_meshes/03_cars/taillights/A04303F27090BB55.usd@
            )
            {
                double3 xformOp:rotateYZX = (0, 0, -0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateYZX", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_176FC8413EAF0D32"
        {
            def Xform "Xform_176FC8413EAF0D32_0" (
                delete references = @./03_meshes/03_cars/taillightsA04303F27090BB55.usd@
                prepend references = @./03_meshes/03_cars/taillights/A04303F27090BB55.usd@
            )
            {
                double3 xformOp:rotateYZX = (0, 0, -0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateYZX", "xformOp:scale"]
            }

            over "mesh" (
                active = false
            )
            {
            }
        }

        over "mesh_6A2500143140F968"
        {
            def Xform "Xform_6A2500143140F968_0" (
                delete references = @./03_meshes/03_cars/taillights6A2500143140F968.usd@
                prepend references = @./03_meshes/03_cars/taillights/6A2500143140F968.usd@
            )
            {
                double3 xformOp:rotateYZX = (0, 0, -0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateYZX", "xformOp:scale"]

                over "Light_001"
                {
                    rel material:binding = </RootNode/Looks/Taillight_Glass_Red> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }

                over "Light_003"
                {
                    rel material:binding = </RootNode/Looks/Taillight_Glass_Orange> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }

                over "bulb_001"
                {
                    rel material:binding = </RootNode/Looks/lightbulb_01> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }

                over "bulb_002"
                {
                    rel material:binding = </RootNode/Looks/lightbulb_02> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }

                over "bulb_003"
                {
                    rel material:binding = </RootNode/Looks/lightbulb_03> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }

                over "Reflector"
                {
                    rel material:binding = </RootNode/Looks/Refractor_01> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }

                over "Light_002_Big"
                {
                    rel material:binding = </RootNode/Looks/Taillight_Glass_Red> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }

                over "Light_002_Small"
                {
                    rel material:binding = </RootNode/Looks/Taillight_Glass_White> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }
        }
    }

    over "Camera"
    {
        bool omni:kit:cameraLock = 1
        custom uniform vector3d omni:kit:centerOfInterest = (0, 0, -1309.1781937449296)
    }
}

over "Environment"
{
    over "sky"
    {
        over "AxisNorth"
        {
            double3 xformOp:rotateZYX = (0, 0, 0)

            over "AxisLatitude"
            {
                double3 xformOp:rotateZYX = (0, 0, 51.426)

                over "AxisSHA"
                {
                    double3 xformOp:rotateZYX = (15.260124001450436, 0, 0)

                    over "AxisDeclination"
                    {
                        double3 xformOp:rotateZYX = (0, 0, 7.999834338981633)

                        over "DistantLight"
                        {
                            color3f inputs:color = (0.25, 0.013, 0)
                            float inputs:intensity = 0
                        }
                    }
                }
            }

            over "AxisAzimuth"
            {
                double3 xformOp:rotateZYX = (0, 17.36136327697848, 0)

                over "AxisElevation"
                {
                    double3 xformOp:rotateZYX = (0, 0, -29.13586534194882)
                }
            }
        }

        over "DomeLight"
        {
            float3 xformOp:rotateZYX = (270, 0, 0)
        }

        over "Looks"
        {
            over "SkyMaterial"
            {
                over "Shader"
                {
                    float inputs:Azimuth = 17.361362
                    custom float inputs:CloudCoverage = -0
                    custom bool inputs:CumulusEnabled = 1
                    float inputs:DayOfYear = 100
                    float inputs:Declination = 7.9998345
                    float inputs:Elevation = -29.135866
                    custom float inputs:haze = 1
                    float inputs:Latitude = 51.426
                    float inputs:Longitude = -0.985
                    float inputs:NorthOrientation = 0
                    float inputs:SHA = 164.73988
                    float inputs:TimeOfDay = 23.005556
                }
            }
        }
    }
}

