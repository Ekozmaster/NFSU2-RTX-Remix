#usda 1.0
(
    upAxis = "Z"
)

over "RootNode"
{
    over "meshes"
    {
        over "mesh_581E9FC80303E258"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "Headlight_R_Main" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                color3f inputs:color = (1, 1, 1)
                float inputs:intensity = 3000
                float inputs:radius = 0.1
                float inputs:shaping:cone:angle = 38
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                bool visibleInPrimaryRay = 0
                double3 xformOp:rotateXYZ = (0, -90, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (2.35, -0.55, 0.7000000104308128)
                custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def SphereLight "Headlight_R" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                    color3f inputs:color = (1, 0.35302097, 0.04247105)
                    float inputs:intensity = 1500
                    float inputs:radius = 0.1
                    float inputs:shaping:cone:angle = 39.5
                    float inputs:shaping:cone:softness = 0.02
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def SphereLight "Headlight_Y" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                    color3f inputs:color = (1, 0.67058825, 0)
                    float inputs:intensity = 1500
                    float inputs:radius = 0.1
                    float inputs:shaping:cone:angle = 39
                    float inputs:shaping:cone:softness = 0.02
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def SphereLight "Headlight_B" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                    color3f inputs:color = (0, 0.1776061, 1)
                    float inputs:intensity = 1500
                    float inputs:radius = 0.1
                    float inputs:shaping:cone:angle = 40
                    float inputs:shaping:cone:softness = 0.02
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def SphereLight "Headlight_L_Main" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                color3f inputs:color = (1, 1, 1)
                float inputs:intensity = 3000
                float inputs:radius = 0.1
                float inputs:shaping:cone:angle = 38
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                bool visibleInPrimaryRay = 0
                double3 xformOp:rotateXYZ = (0, -90, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (2.35, 0.55, 0.7000000104308128)
                custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def SphereLight "Headlight_R" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                    color3f inputs:color = (1, 0.35302097, 0.04247105)
                    float inputs:intensity = 1500
                    float inputs:radius = 0.1
                    float inputs:shaping:cone:angle = 39.5
                    float inputs:shaping:cone:softness = 0.02
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def SphereLight "Headlight_Y" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                    color3f inputs:color = (1, 0.67058825, 0)
                    float inputs:intensity = 1500
                    float inputs:radius = 0.1
                    float inputs:shaping:cone:angle = 39
                    float inputs:shaping:cone:softness = 0.02
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def SphereLight "Headlight_B" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                    color3f inputs:color = (0, 0.1776061, 1)
                    float inputs:intensity = 1500
                    float inputs:radius = 0.1
                    float inputs:shaping:cone:angle = 40
                    float inputs:shaping:cone:softness = 0.02
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def SphereLight "TailLight_L" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                color3f inputs:color = (1, 0, 0)
                float inputs:intensity = 10
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness = 0.2
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                bool visibleInPrimaryRay = 0
                double3 xformOp:rotateXYZ = (0, 90, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-2.33, 0.8, 0.85)
                custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "TailLight_R" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                color3f inputs:color = (1, 0, 0)
                float inputs:intensity = 10
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness = 0.2
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                bool visibleInPrimaryRay = 0
                double3 xformOp:rotateXYZ = (0, 90, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-2.33, -0.8, 0.85)
                custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_C823F3071966862E"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "Headlight_R_Main" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                color3f inputs:color = (1, 1, 1)
                float inputs:intensity = 3000
                float inputs:radius = 0.1
                float inputs:shaping:cone:angle = 38
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                bool visibleInPrimaryRay = 0
                double3 xformOp:rotateXYZ = (0, -90, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (2.35, -0.55, 0.7000000104308128)
                custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def SphereLight "Headlight_R" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                    color3f inputs:color = (1, 0.35302097, 0.04247105)
                    float inputs:intensity = 1500
                    float inputs:radius = 0.1
                    float inputs:shaping:cone:angle = 39.5
                    float inputs:shaping:cone:softness = 0.02
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def SphereLight "Headlight_Y" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                    color3f inputs:color = (1, 0.67058825, 0)
                    float inputs:intensity = 1500
                    float inputs:radius = 0.1
                    float inputs:shaping:cone:angle = 39
                    float inputs:shaping:cone:softness = 0.02
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def SphereLight "Headlight_B" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                    color3f inputs:color = (0, 0.1776061, 1)
                    float inputs:intensity = 1500
                    float inputs:radius = 0.1
                    float inputs:shaping:cone:angle = 40
                    float inputs:shaping:cone:softness = 0.02
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def SphereLight "Headlight_L_Main" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                color3f inputs:color = (1, 1, 1)
                float inputs:intensity = 3000
                float inputs:radius = 0.1
                float inputs:shaping:cone:angle = 38
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                bool visibleInPrimaryRay = 0
                double3 xformOp:rotateXYZ = (0, -90, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (2.35, 0.55, 0.7000000104308128)
                custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def SphereLight "Headlight_R" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                    color3f inputs:color = (1, 0.35302097, 0.04247105)
                    float inputs:intensity = 1500
                    float inputs:radius = 0.1
                    float inputs:shaping:cone:angle = 39.5
                    float inputs:shaping:cone:softness = 0.02
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def SphereLight "Headlight_Y" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                    color3f inputs:color = (1, 0.67058825, 0)
                    float inputs:intensity = 1500
                    float inputs:radius = 0.1
                    float inputs:shaping:cone:angle = 39
                    float inputs:shaping:cone:softness = 0.02
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def SphereLight "Headlight_B" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                    color3f inputs:color = (0, 0.1776061, 1)
                    float inputs:intensity = 1500
                    float inputs:radius = 0.1
                    float inputs:shaping:cone:angle = 40
                    float inputs:shaping:cone:softness = 0.02
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def SphereLight "TailLight_L" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                color3f inputs:color = (1, 0, 0)
                float inputs:intensity = 10
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness = 0.2
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                bool visibleInPrimaryRay = 0
                double3 xformOp:rotateXYZ = (0, 90, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-2.33, 0.8, 0.85)
                custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "TailLight_R" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                color3f inputs:color = (1, 0, 0)
                float inputs:intensity = 10
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness = 0.2
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                bool visibleInPrimaryRay = 0
                double3 xformOp:rotateXYZ = (0, 90, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-2.33, -0.8, 0.85)
                custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_F079DCAA8E4FC676"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "Headlight_R_Main" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                color3f inputs:color = (1, 1, 1)
                float inputs:intensity = 3000
                float inputs:radius = 0.1
                float inputs:shaping:cone:angle = 38
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                bool visibleInPrimaryRay = 0
                double3 xformOp:rotateXYZ = (0, -90, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (2.35, -0.55, 0.7000000104308128)
                custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def SphereLight "Headlight_R" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                    color3f inputs:color = (1, 0.35302097, 0.04247105)
                    float inputs:intensity = 1500
                    float inputs:radius = 0.1
                    float inputs:shaping:cone:angle = 39.5
                    float inputs:shaping:cone:softness = 0.02
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def SphereLight "Headlight_Y" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                    color3f inputs:color = (1, 0.67058825, 0)
                    float inputs:intensity = 1500
                    float inputs:radius = 0.1
                    float inputs:shaping:cone:angle = 39
                    float inputs:shaping:cone:softness = 0.02
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def SphereLight "Headlight_B" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                    color3f inputs:color = (0, 0.1776061, 1)
                    float inputs:intensity = 1500
                    float inputs:radius = 0.1
                    float inputs:shaping:cone:angle = 40
                    float inputs:shaping:cone:softness = 0.02
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def SphereLight "Headlight_L_Main" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                color3f inputs:color = (1, 1, 1)
                float inputs:intensity = 3000
                float inputs:radius = 0.1
                float inputs:shaping:cone:angle = 38
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                bool visibleInPrimaryRay = 0
                double3 xformOp:rotateXYZ = (0, -90, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (2.35, 0.55, 0.7000000104308128)
                custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def SphereLight "Headlight_R" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                    color3f inputs:color = (1, 0.35302097, 0.04247105)
                    float inputs:intensity = 1500
                    float inputs:radius = 0.1
                    float inputs:shaping:cone:angle = 39.5
                    float inputs:shaping:cone:softness = 0.02
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def SphereLight "Headlight_Y" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                    color3f inputs:color = (1, 0.67058825, 0)
                    float inputs:intensity = 1500
                    float inputs:radius = 0.1
                    float inputs:shaping:cone:angle = 39
                    float inputs:shaping:cone:softness = 0.02
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def SphereLight "Headlight_B" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                    color3f inputs:color = (0, 0.1776061, 1)
                    float inputs:intensity = 1500
                    float inputs:radius = 0.1
                    float inputs:shaping:cone:angle = 40
                    float inputs:shaping:cone:softness = 0.02
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def SphereLight "TailLight_L" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                color3f inputs:color = (1, 0, 0)
                float inputs:intensity = 10
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness = 0.2
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                bool visibleInPrimaryRay = 0
                double3 xformOp:rotateXYZ = (0, 90, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-2.33, 0.8, 0.85)
                custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "TailLight_R" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                color3f inputs:color = (1, 0, 0)
                float inputs:intensity = 10
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness = 0.2
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                bool visibleInPrimaryRay = 0
                double3 xformOp:rotateXYZ = (0, 90, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-2.33, -0.8, 0.85)
                custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_C131C7FDD3075971"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "Headlight_R_Main" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                color3f inputs:color = (1, 1, 1)
                float inputs:intensity = 3000
                float inputs:radius = 0.1
                float inputs:shaping:cone:angle = 38
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                bool visibleInPrimaryRay = 0
                double3 xformOp:rotateXYZ = (0, -90, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (2.35, -0.55, 0.7000000104308128)
                custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def SphereLight "Headlight_R" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                    color3f inputs:color = (1, 0.35302097, 0.04247105)
                    float inputs:intensity = 1500
                    float inputs:radius = 0.1
                    float inputs:shaping:cone:angle = 39.5
                    float inputs:shaping:cone:softness = 0.02
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def SphereLight "Headlight_Y" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                    color3f inputs:color = (1, 0.67058825, 0)
                    float inputs:intensity = 1500
                    float inputs:radius = 0.1
                    float inputs:shaping:cone:angle = 39
                    float inputs:shaping:cone:softness = 0.02
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def SphereLight "Headlight_B" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                    color3f inputs:color = (0, 0.1776061, 1)
                    float inputs:intensity = 1500
                    float inputs:radius = 0.1
                    float inputs:shaping:cone:angle = 40
                    float inputs:shaping:cone:softness = 0.02
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def SphereLight "Headlight_L_Main" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                color3f inputs:color = (1, 1, 1)
                float inputs:intensity = 3000
                float inputs:radius = 0.1
                float inputs:shaping:cone:angle = 38
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                bool visibleInPrimaryRay = 0
                double3 xformOp:rotateXYZ = (0, -90, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (2.35, 0.55, 0.7000000104308128)
                custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def SphereLight "Headlight_R" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                    color3f inputs:color = (1, 0.35302097, 0.04247105)
                    float inputs:intensity = 1500
                    float inputs:radius = 0.1
                    float inputs:shaping:cone:angle = 39.5
                    float inputs:shaping:cone:softness = 0.02
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def SphereLight "Headlight_Y" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                    color3f inputs:color = (1, 0.67058825, 0)
                    float inputs:intensity = 1500
                    float inputs:radius = 0.1
                    float inputs:shaping:cone:angle = 39
                    float inputs:shaping:cone:softness = 0.02
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def SphereLight "Headlight_B" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                    color3f inputs:color = (0, 0.1776061, 1)
                    float inputs:intensity = 1500
                    float inputs:radius = 0.1
                    float inputs:shaping:cone:angle = 40
                    float inputs:shaping:cone:softness = 0.02
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def SphereLight "TailLight_L" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                color3f inputs:color = (1, 0, 0)
                float inputs:intensity = 10
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness = 0.2
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                bool visibleInPrimaryRay = 0
                double3 xformOp:rotateXYZ = (0, 90, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-2.33, 0.8, 0.85)
                custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "TailLight_R" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-50, -50, -50), (50, 50, 50)]
                color3f inputs:color = (1, 0, 0)
                float inputs:intensity = 10
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness = 0.2
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                bool visibleInPrimaryRay = 0
                double3 xformOp:rotateXYZ = (0, 90, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-2.33, -0.8, 0.85)
                custom float inputs:volumetric_radiance_scale = 0
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }
    }
}

