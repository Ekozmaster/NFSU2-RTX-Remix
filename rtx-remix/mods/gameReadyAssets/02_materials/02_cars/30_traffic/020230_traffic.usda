#usda 1.0
(
    upAxis = "Z"
)

over "Looks" (
    prepend apiSchemas = ["MaterialBindingAPI"]
)
{
    rel material:binding = </Looks/traffic_alfaRomeoZ33_bodyWork> (
        bindMaterialAs = "weakerThanDescendants"
    )

    def Material "traffic_chevroletCapricePoliceCar94_bodyWorkTYPE01"
    {
        token outputs:mdl:displacement.connect = </Looks/traffic_chevroletCapricePoliceCar94_bodyWorkTYPE01/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/traffic_chevroletCapricePoliceCar94_bodyWorkTYPE01/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/traffic_chevroletCapricePoliceCar94_bodyWorkTYPE01/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            asset inputs:diffuse_texture = @./chevroletCapricePoliceCar94_bodyWorkMatTYPE01_Base_color.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Map"
                doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:metallic_constant = 0.13 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Metallic Amount"
                doc = """Metallic Material

"""
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections

"""
                hidden = false
            )
            asset inputs:reflectionroughness_texture = @./chevroletCapricePoliceCar94_bodyWorkMatTYPE01_Roughness.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Specular"
                displayName = "Roughness Map"
                hidden = false
                renderType = "texture_2d"
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "traffic_chevroletCapricePoliceCar94_bodyWorkTYPE02"
    {
        token outputs:mdl:displacement.connect = </Looks/traffic_chevroletCapricePoliceCar94_bodyWorkTYPE02/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/traffic_chevroletCapricePoliceCar94_bodyWorkTYPE02/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/traffic_chevroletCapricePoliceCar94_bodyWorkTYPE02/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            asset inputs:diffuse_texture = @./chevroletCapricePoliceCar94_bodyWorkMatTYPE02_Base_color.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Map"
                doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:metallic_constant = 0.13 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Metallic Amount"
                doc = """Metallic Material

"""
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections

"""
                hidden = false
            )
            asset inputs:reflectionroughness_texture = @./chevroletCapricePoliceCar94_bodyWorkMatTYPE02_Roughness.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Specular"
                displayName = "Roughness Map"
                hidden = false
                renderType = "texture_2d"
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "traffic_alfaRomeoZ33_bodyWork"
    {
        token outputs:mdl:displacement.connect = </Looks/traffic_alfaRomeoZ33_bodyWork/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/traffic_alfaRomeoZ33_bodyWork/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/traffic_alfaRomeoZ33_bodyWork/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            asset inputs:diffuse_texture = @./alfaRomeoZ33_bodyWorkMat_Base_color.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Map"
                doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:metallic_constant = 0.13 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Metallic Amount"
                doc = """Metallic Material

"""
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections

"""
                hidden = false
            )
            asset inputs:reflectionroughness_texture = @./alfaRomeoZ33_bodyWorkMat_Roughness.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Specular"
                displayName = "Roughness Map"
                hidden = false
                renderType = "texture_2d"
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "traffic_dodgeRamMK1_bodyWork"
    {
        token outputs:mdl:displacement.connect = </Looks/traffic_dodgeRamMK1_bodyWork/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/traffic_dodgeRamMK1_bodyWork/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/traffic_dodgeRamMK1_bodyWork/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            asset inputs:diffuse_texture = @./dodge_Ram_MK1_bodyWorkMat_Base_color.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Map"
                doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:metallic_constant = 0.13 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Metallic Amount"
                doc = """Metallic Material

"""
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections

"""
                hidden = false
            )
            asset inputs:reflectionroughness_texture = @./dodge_Ram_MK1_bodyWorkMat_Roughness.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Specular"
                displayName = "Roughness Map"
                hidden = false
                renderType = "texture_2d"
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "traffic_dodgeMiniRamVan_bodyWork"
    {
        token outputs:mdl:displacement.connect = </Looks/traffic_dodgeMiniRamVan_bodyWork/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/traffic_dodgeMiniRamVan_bodyWork/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/traffic_dodgeMiniRamVan_bodyWork/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            asset inputs:diffuse_texture = @./dodgeMiniRamVan_bodyWorkMat_Base_color.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Map"
                doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:metallic_constant = 0.13 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Metallic Amount"
                doc = """Metallic Material

"""
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections

"""
                hidden = false
            )
            asset inputs:reflectionroughness_texture = @./dodgeMiniRamVan_bodyWorkMat_Roughness.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Specular"
                displayName = "Roughness Map"
                hidden = false
                renderType = "texture_2d"
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "traffic_nissanLayrelClubS_bodyWorkMat"
    {
        token outputs:mdl:displacement.connect = </Looks/traffic_nissanLayrelClubS_bodyWorkMat/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/traffic_nissanLayrelClubS_bodyWorkMat/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/traffic_nissanLayrelClubS_bodyWorkMat/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            asset inputs:diffuse_texture = @./nissanLayrelClubS_bodyWorkMat_Base_color.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Map"
                doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:metallic_constant = 0.13 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Metallic Amount"
                doc = """Metallic Material

"""
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections

"""
                hidden = false
            )
            asset inputs:reflectionroughness_texture = @./nissanLayrelClubS_bodyWorkMat_Roughness.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Specular"
                displayName = "Roughness Map"
                hidden = false
                renderType = "texture_2d"
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "traffic_oldsmobileBravada_bodyWorkMat"
    {
        token outputs:mdl:displacement.connect = </Looks/traffic_oldsmobileBravada_bodyWorkMat/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/traffic_oldsmobileBravada_bodyWorkMat/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/traffic_oldsmobileBravada_bodyWorkMat/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            asset inputs:diffuse_texture = @./oldsmobileBravada_bodyWorkMat_Base_color.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Map"
                doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:metallic_constant = 0.13 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Metallic Amount"
                doc = """Metallic Material

"""
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections

"""
                hidden = false
            )
            asset inputs:reflectionroughness_texture = @./oldsmobileBravada_bodyWorkMat_Roughness.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Specular"
                displayName = "Roughness Map"
                hidden = false
                renderType = "texture_2d"
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "traffic_saabHatchback2001_bodyWorkMat"
    {
        token outputs:mdl:displacement.connect = </Looks/traffic_saabHatchback2001_bodyWorkMat/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/traffic_saabHatchback2001_bodyWorkMat/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/traffic_saabHatchback2001_bodyWorkMat/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            asset inputs:diffuse_texture = @./saabHatchback2001_bodyWorkMat_Base_color.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Map"
                doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:metallic_constant = 0.13 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Metallic Amount"
                doc = """Metallic Material

"""
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections

"""
                hidden = false
            )
            asset inputs:reflectionroughness_texture = @./saabHatchback2001_bodyWorkMat_Roughness.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Specular"
                displayName = "Roughness Map"
                hidden = false
                renderType = "texture_2d"
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "traffic_suzukiEsteem1998_bodyWorkTYPE01"
    {
        token outputs:mdl:displacement.connect = </Looks/traffic_suzukiEsteem1998_bodyWorkTYPE01/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/traffic_suzukiEsteem1998_bodyWorkTYPE01/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/traffic_suzukiEsteem1998_bodyWorkTYPE01/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            asset inputs:diffuse_texture = @./suzukiEsteem1998_bodyWorkMatTYPE01_Base_color.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Map"
                doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:metallic_constant = 0.13 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Metallic Amount"
                doc = """Metallic Material

"""
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections

"""
                hidden = false
            )
            asset inputs:reflectionroughness_texture = @./suzukiEsteem1998_bodyWorkMatTYPE01_Roughness.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Specular"
                displayName = "Roughness Map"
                hidden = false
                renderType = "texture_2d"
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "traffic_suzukiEsteem1998_bodyWorkTYPE02"
    {
        token outputs:mdl:displacement.connect = </Looks/traffic_suzukiEsteem1998_bodyWorkTYPE02/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/traffic_suzukiEsteem1998_bodyWorkTYPE02/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/traffic_suzukiEsteem1998_bodyWorkTYPE02/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            asset inputs:diffuse_texture = @./suzukiEsteem1998_bodyWorkMatTYPE02_Base_color.dds@ (
                colorSpace = "raw"
                customData = {
                    asset default = @@
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Map"
                doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:metallic_constant = 0.13 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Metallic Amount"
                doc = """Metallic Material

"""
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections

"""
                hidden = false
            )
            asset inputs:reflectionroughness_texture = @./suzukiEsteem1998_bodyWorkMatTYPE02_Roughness.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Specular"
                displayName = "Roughness Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:subsurface_measurement_distance = 0 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 16
                        float min = 0
                    }
                }
                displayGroup = "Subsurface"
                displayName = "Subsurface Measurement Distance"
                doc = """The distance between front and back surface of subsurface materials, or the thickness of the surface.
This parameter is unused.
"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "traffic_toyotaCorollaLevin_bodyWork"
    {
        token outputs:mdl:displacement.connect = </Looks/traffic_toyotaCorollaLevin_bodyWork/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/traffic_toyotaCorollaLevin_bodyWork/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/traffic_toyotaCorollaLevin_bodyWork/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            asset inputs:diffuse_texture = @./toyotaCorollaLevin_bodyWorkMat_Base_color.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Map"
                doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:metallic_constant = 0.13 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Metallic Amount"
                doc = """Metallic Material

"""
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections

"""
                hidden = false
            )
            asset inputs:reflectionroughness_texture = @./toyotaCorollaLevin_bodyWorkMat_Roughness.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Specular"
                displayName = "Roughness Map"
                hidden = false
                renderType = "texture_2d"
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "traffic_suzukiEsteem1998_taxiSignMat"
    {
        token outputs:mdl:displacement.connect = </Looks/traffic_suzukiEsteem1998_taxiSignMat/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/traffic_suzukiEsteem1998_taxiSignMat/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/traffic_suzukiEsteem1998_taxiSignMat/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            asset inputs:diffuse_texture = @./suzukiEsteem1998_bodyWorkMatTYPE02_Base_color.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Map"
                doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:metallic_constant = 0 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Metallic Amount"
                doc = """Metallic Material

"""
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections

"""
                hidden = false
            )
            asset inputs:reflectionroughness_texture = @./suzukiEsteem1998_bodyWorkMatTYPE02_Roughness.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Specular"
                displayName = "Roughness Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:subsurface_measurement_distance = 2 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 16
                        float min = 0
                    }
                }
                displayGroup = "Subsurface"
                displayName = "Subsurface Measurement Distance"
                doc = """The distance between front and back surface of subsurface materials, or the thickness of the surface.
This parameter is unused.
"""
                hidden = false
            )
            color3f inputs:subsurface_single_scattering_albedo = (1, 0.8648646, 0.1891892) (
                customData = {
                    float3 default = (0.5, 0.5, 0.5)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Subsurface"
                displayName = "Subsurface Single Scattering Albedo"
                doc = """The color of light that most easily passes through the material after a single time scattering inside volume.
This parameter is unused.
"""
                hidden = false
                renderType = "color"
            )
            color3f inputs:subsurface_transmittance_color = (0.93436295, 0.9343614, 0.9343536) (
                customData = {
                    float3 default = (0.5, 0.5, 0.5)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Subsurface"
                displayName = "Subsurface Transmittance Color"
                doc = """The transmittance color of subsurface material. This property can be easily considered as the light color after passing through volume.
This parameter is unused.
"""
                hidden = false
                renderType = "color"
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "traffic_chevroletCapricePoliceCar94_taxiSignMat"
    {
        token outputs:mdl:displacement.connect = </Looks/traffic_chevroletCapricePoliceCar94_taxiSignMat/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/traffic_chevroletCapricePoliceCar94_taxiSignMat/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/traffic_chevroletCapricePoliceCar94_taxiSignMat/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            asset inputs:diffuse_texture = @./chevroletCapricePoliceCar94_bodyWorkMatTYPE02_Base_color.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Map"
                doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:metallic_constant = 0 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Metallic Amount"
                doc = """Metallic Material

"""
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections

"""
                hidden = false
            )
            asset inputs:reflectionroughness_texture = @./chevroletCapricePoliceCar94_bodyWorkMatTYPE02_Roughness.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Specular"
                displayName = "Roughness Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:subsurface_measurement_distance = 2 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 16
                        float min = 0
                    }
                }
                displayGroup = "Subsurface"
                displayName = "Subsurface Measurement Distance"
                doc = """The distance between front and back surface of subsurface materials, or the thickness of the surface.
This parameter is unused.
"""
                hidden = false
            )
            color3f inputs:subsurface_single_scattering_albedo = (1, 0.8648646, 0.1891892) (
                customData = {
                    float3 default = (0.5, 0.5, 0.5)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Subsurface"
                displayName = "Subsurface Single Scattering Albedo"
                doc = """The color of light that most easily passes through the material after a single time scattering inside volume.
This parameter is unused.
"""
                hidden = false
                renderType = "color"
            )
            color3f inputs:subsurface_transmittance_color = (0.93436295, 0.9343614, 0.9343536) (
                customData = {
                    float3 default = (0.5, 0.5, 0.5)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Subsurface"
                displayName = "Subsurface Transmittance Color"
                doc = """The transmittance color of subsurface material. This property can be easily considered as the light color after passing through volume.
This parameter is unused.
"""
                hidden = false
                renderType = "color"
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }
}

