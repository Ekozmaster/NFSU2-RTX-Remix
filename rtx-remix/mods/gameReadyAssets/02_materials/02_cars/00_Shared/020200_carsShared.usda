#usda 1.0
(
    subLayers = [
        @./Effect/020200_Effects.usda@,
        @./Glass/020200_carsSharedGlass.usda@,
        @./Decals/020200_carsSharedDecals.usda@,
        @./Metal/020200_carsSharedMetal.usda@,
        @./Carpaint/020200_carsSharedCarpaint.usda@,
        @./CarWheel/020200_carsSharedCarWheel.usda@
    ]
    upAxis = "Z"
)

def "Looks" (
    prepend apiSchemas = ["MaterialBindingAPI"]
)
{
    def Material "placeholder_Transparent"
    {
        token outputs:mdl:displacement.connect = </Looks/placeholder_Transparent/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/placeholder_Transparent/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/placeholder_Transparent/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.000001, 9.9999e-7, 9.9999e-7) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:opacity_constant = 0 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Opacity Amount"
                doc = """0 for completely transparent, 1 for completely opaque.  (Used if no texture is specified)

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Chrome_Shiny"
    {
        token outputs:mdl:displacement.connect = </Looks/Chrome_Shiny/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Chrome_Shiny/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Chrome_Shiny/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.79999995 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0.099999994 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Chrome_Rough"
    {
        token outputs:mdl:displacement.connect = </Looks/Chrome_Rough/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Chrome_Rough/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Chrome_Rough/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.79999995 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0.19999999 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Chrome_More_Rough"
    {
        token outputs:mdl:displacement.connect = </Looks/Chrome_More_Rough/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Chrome_More_Rough/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Chrome_More_Rough/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.6, 0.6, 0.6) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.79999995 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Plastic_White"
    {
        token outputs:mdl:displacement.connect = </Looks/Plastic_White/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Plastic_White/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Plastic_White/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.95366794, 0.9536584, 0.9536584) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:reflection_roughness_constant = 0.59999996 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Plastic_Grey"
    {
        token outputs:mdl:displacement.connect = </Looks/Plastic_Grey/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Plastic_Grey/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Plastic_Grey/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:reflection_roughness_constant = 0.59999996 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Plastic_Black"
    {
        token outputs:mdl:displacement.connect = </Looks/Plastic_Black/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Plastic_Black/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Plastic_Black/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.05, 0.0499995, 0.0499995) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:reflection_roughness_constant = 0.59999996 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Plastic_Black_Glossy"
    {
        token outputs:mdl:displacement.connect = </Looks/Plastic_Black_Glossy/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Plastic_Black_Glossy/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Plastic_Black_Glossy/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.05, 0.0499995, 0.0499995) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Base Color"
                doc = """The base albedo color to use if no texture is specified

"""
                hidden = false
                renderType = "color"
            )
            float inputs:reflection_roughness_constant = 0.13 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Plastic_Grey_Glossy"
    {
        token outputs:mdl:displacement.connect = </Looks/Plastic_Grey_Glossy/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Plastic_Grey_Glossy/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Plastic_Grey_Glossy/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.16216218, 0.16216056, 0.16216056) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Base Color"
                doc = """The base albedo color to use if no texture is specified

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.17999999 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Metallic Amount"
                doc = """Metallic Material

"""
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0.17 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "License_Plate"
    {
        token outputs:mdl:displacement.connect = </Looks/License_Plate/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/License_Plate/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/License_Plate/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            asset inputs:diffuse_texture = @./License_Plate_albedo.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Albedo/Opacity Map"
                doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:displace_in = 0.02 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 255
                        float min = 0
                    }
                }
                displayGroup = "Displacement"
                displayName = "Inwards Displacement"
                doc = """Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep.
This parameter is unused.
"""
                hidden = false
            )
            asset inputs:height_texture = @./License_Plate_height.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Displacement"
                displayName = "Height Map"
                doc = """A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point.
This parameter is unused.
"""
                hidden = false
                renderType = "texture_2d"
            )
            asset inputs:metallic_texture = @./License_Plate_metal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Metallic Map"
                hidden = false
                renderType = "texture_2d"
            )
            asset inputs:normalmap_texture = @./License_Plate_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            asset inputs:reflectionroughness_texture = @./License_Plate_rough.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Roughness Map"
                doc = """A single channel texture defining roughness per texel.  Higher roughness values lead to more blurry reflections.

"""
                hidden = false
                renderType = "texture_2d"
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Clear"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Clear/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Clear/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Clear/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.5999999 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = """Index of Refraction of the material

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Clear_Normal_Type_02"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Clear_Normal_Type_02/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Clear_Normal_Type_02/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Clear_Normal_Type_02/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = """Index of Refraction of the material

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_Type_02_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            color3f inputs:transmittance_color = (0.97, 0.97, 0.97) (
                customData = {
                    float3 default = (0.97, 0.97, 0.97)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color"
                doc = """Expected transmittance after the specified transmittance distance through the volume.

"""
                hidden = false
                renderType = "color"
            )
            float inputs:transmittance_measurement_distance = 1 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 65504
                        float min = 0.001
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Measurement Distance"
                doc = """Distance to match the transmittance through the volume at.

"""
                hidden = false
            )
            bool inputs:use_diffuse_layer = 0 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Volume"
                displayName = "Use diffuse layer"
                doc = """When set, simulates a diffuse layer on top of the material

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Clear_Normal_Type_03"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Clear_Normal_Type_03/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Clear_Normal_Type_03/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Clear_Normal_Type_03/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = """Index of Refraction of the material

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_Type_03_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            color3f inputs:transmittance_color = (0.97, 0.97, 0.97) (
                customData = {
                    float3 default = (0.97, 0.97, 0.97)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color"
                doc = """Expected transmittance after the specified transmittance distance through the volume.

"""
                hidden = false
                renderType = "color"
            )
            float inputs:transmittance_measurement_distance = 1 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 65504
                        float min = 0.001
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Measurement Distance"
                doc = """Distance to match the transmittance through the volume at.

"""
                hidden = false
            )
            bool inputs:use_diffuse_layer = 0 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Volume"
                displayName = "Use diffuse layer"
                doc = """When set, simulates a diffuse layer on top of the material

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Clear_Normal_Type_04"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Clear_Normal_Type_04/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Clear_Normal_Type_04/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Clear_Normal_Type_04/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = """Index of Refraction of the material

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_04_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            color3f inputs:transmittance_color = (0.97, 0.97, 0.97) (
                customData = {
                    float3 default = (0.97, 0.97, 0.97)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color"
                doc = """Expected transmittance after the specified transmittance distance through the volume.

"""
                hidden = false
                renderType = "color"
            )
            float inputs:transmittance_measurement_distance = 1 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 65504
                        float min = 0.001
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Measurement Distance"
                doc = """Distance to match the transmittance through the volume at.

"""
                hidden = false
            )
            bool inputs:use_diffuse_layer = 0 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Volume"
                displayName = "Use diffuse layer"
                doc = """When set, simulates a diffuse layer on top of the material

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Black"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Black/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Black/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Black/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.5999999 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = """Index of Refraction of the material

"""
                hidden = false
            )
            color3f inputs:transmittance_color = (0.07722008, 0.07721931, 0.07721931) (
                customData = {
                    float3 default = (0.97, 0.97, 0.97)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color"
                doc = """Expected transmittance after the specified transmittance distance through the volume.

"""
                hidden = false
                renderType = "color"
            )
            float inputs:transmittance_measurement_distance = 0.003 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 65504
                        float min = 0.001
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Measurement Distance"
                doc = """Distance to match the transmittance through the volume at.

"""
                hidden = false
            )
            bool inputs:use_diffuse_layer = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Volume"
                displayName = "Use diffuse layer"
                doc = """When set, simulates a diffuse layer on top of the material

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Red"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Red/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Red/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Red/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.5999999 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = """Index of Refraction of the material

"""
                hidden = false
            )
            color3f inputs:transmittance_color = (1, 0, 0) (
                customData = {
                    float3 default = (0.97, 0.97, 0.97)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color"
                doc = """Expected transmittance after the specified transmittance distance through the volume.

"""
                hidden = false
                renderType = "color"
            )
            float inputs:transmittance_measurement_distance = 0.004 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 65504
                        float min = 0.001
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Measurement Distance"
                doc = """Distance to match the transmittance through the volume at.

"""
                hidden = false
            )
            asset inputs:transmittance_texture = @./glass_red_albedo.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color/Diffuse Albedo Texture"
                doc = """Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer

"""
                hidden = false
                renderType = "texture_2d"
            )
            bool inputs:use_diffuse_layer = 0 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Volume"
                displayName = "Use diffuse layer"
                doc = """When set, simulates a diffuse layer on top of the material

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Red_Pale"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Red_Pale/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Red_Pale/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Red_Pale/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.5999999 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = """Index of Refraction of the material

"""
                hidden = false
            )
            color3f inputs:transmittance_color = (0.9189189, 0.3796306, 0.3796306) (
                customData = {
                    float3 default = (0.97, 0.97, 0.97)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color"
                doc = """Expected transmittance after the specified transmittance distance through the volume.

"""
                hidden = false
                renderType = "color"
            )
            float inputs:transmittance_measurement_distance = 0.004 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 65504
                        float min = 0.001
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Measurement Distance"
                doc = """Distance to match the transmittance through the volume at.

"""
                hidden = false
            )
            asset inputs:transmittance_texture = @./glass_red_albedo.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color/Diffuse Albedo Texture"
                doc = """Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer

"""
                hidden = false
                renderType = "texture_2d"
            )
            bool inputs:use_diffuse_layer = 0 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Volume"
                displayName = "Use diffuse layer"
                doc = """When set, simulates a diffuse layer on top of the material

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Red_Normal_Type_02"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Red_Normal_Type_02/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Red_Normal_Type_02/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Red_Normal_Type_02/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = """Index of Refraction of the material

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_Type_02_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            color3f inputs:transmittance_color = (0.9647059, 0.20392157, 0.03137255) (
                customData = {
                    float3 default = (0.97, 0.97, 0.97)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color"
                doc = """Expected transmittance after the specified transmittance distance through the volume.

"""
                hidden = false
                renderType = "color"
            )
            float inputs:transmittance_measurement_distance = 0.003 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 65504
                        float min = 0.001
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Measurement Distance"
                doc = """Distance to match the transmittance through the volume at.

"""
                hidden = false
            )
            bool inputs:use_diffuse_layer = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Volume"
                displayName = "Use diffuse layer"
                doc = """When set, simulates a diffuse layer on top of the material

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Red_Normal_Type_03"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Red_Normal_Type_03/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Red_Normal_Type_03/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Red_Normal_Type_03/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = """Index of Refraction of the material

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_Type_03_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            color3f inputs:transmittance_color = (0.9647059, 0.20392157, 0.03137255) (
                customData = {
                    float3 default = (0.97, 0.97, 0.97)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color"
                doc = """Expected transmittance after the specified transmittance distance through the volume.

"""
                hidden = false
                renderType = "color"
            )
            float inputs:transmittance_measurement_distance = 0.003 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 65504
                        float min = 0.001
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Measurement Distance"
                doc = """Distance to match the transmittance through the volume at.

"""
                hidden = false
            )
            bool inputs:use_diffuse_layer = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Volume"
                displayName = "Use diffuse layer"
                doc = """When set, simulates a diffuse layer on top of the material

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Red_Normal_Type_04"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Red_Normal_Type_04/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Red_Normal_Type_04/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Red_Normal_Type_04/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = """Index of Refraction of the material

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_04_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            color3f inputs:transmittance_color = (0.9647059, 0.20392157, 0.03137255) (
                customData = {
                    float3 default = (0.97, 0.97, 0.97)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color"
                doc = """Expected transmittance after the specified transmittance distance through the volume.

"""
                hidden = false
                renderType = "color"
            )
            float inputs:transmittance_measurement_distance = 0.003 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 65504
                        float min = 0.001
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Measurement Distance"
                doc = """Distance to match the transmittance through the volume at.

"""
                hidden = false
            )
            bool inputs:use_diffuse_layer = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Volume"
                displayName = "Use diffuse layer"
                doc = """When set, simulates a diffuse layer on top of the material

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Red_Normal_Type_11"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Red_Normal_Type_11/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Red_Normal_Type_11/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Red_Normal_Type_11/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = """Index of Refraction of the material

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_11_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            color3f inputs:transmittance_color = (0.9647059, 0.20392157, 0.03137255) (
                customData = {
                    float3 default = (0.97, 0.97, 0.97)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color"
                doc = """Expected transmittance after the specified transmittance distance through the volume.

"""
                hidden = false
                renderType = "color"
            )
            float inputs:transmittance_measurement_distance = 0.003 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 65504
                        float min = 0.001
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Measurement Distance"
                doc = """Distance to match the transmittance through the volume at.

"""
                hidden = false
            )
            bool inputs:use_diffuse_layer = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Volume"
                displayName = "Use diffuse layer"
                doc = """When set, simulates a diffuse layer on top of the material

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Red_Normal_Type_12"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Red_Normal_Type_12/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Red_Normal_Type_12/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Red_Normal_Type_12/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = """Index of Refraction of the material

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_12_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            color3f inputs:transmittance_color = (0.9647059, 0.20392157, 0.03137255) (
                customData = {
                    float3 default = (0.97, 0.97, 0.97)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color"
                doc = """Expected transmittance after the specified transmittance distance through the volume.

"""
                hidden = false
                renderType = "color"
            )
            float inputs:transmittance_measurement_distance = 0.003 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 65504
                        float min = 0.001
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Measurement Distance"
                doc = """Distance to match the transmittance through the volume at.

"""
                hidden = false
            )
            bool inputs:use_diffuse_layer = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Volume"
                displayName = "Use diffuse layer"
                doc = """When set, simulates a diffuse layer on top of the material

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Red_Normal_Type_13"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Red_Normal_Type_13/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Red_Normal_Type_13/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Red_Normal_Type_13/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = """Index of Refraction of the material

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_13_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            color3f inputs:transmittance_color = (0.9647059, 0.20392157, 0.03137255) (
                customData = {
                    float3 default = (0.97, 0.97, 0.97)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color"
                doc = """Expected transmittance after the specified transmittance distance through the volume.

"""
                hidden = false
                renderType = "color"
            )
            float inputs:transmittance_measurement_distance = 0.003 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 65504
                        float min = 0.001
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Measurement Distance"
                doc = """Distance to match the transmittance through the volume at.

"""
                hidden = false
            )
            bool inputs:use_diffuse_layer = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Volume"
                displayName = "Use diffuse layer"
                doc = """When set, simulates a diffuse layer on top of the material

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Red_Normal_Type_14"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Red_Normal_Type_14/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Red_Normal_Type_14/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Red_Normal_Type_14/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = """Index of Refraction of the material

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_14_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            color3f inputs:transmittance_color = (0.9647059, 0.20392157, 0.03137255) (
                customData = {
                    float3 default = (0.97, 0.97, 0.97)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color"
                doc = """Expected transmittance after the specified transmittance distance through the volume.

"""
                hidden = false
                renderType = "color"
            )
            float inputs:transmittance_measurement_distance = 0.003 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 65504
                        float min = 0.001
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Measurement Distance"
                doc = """Distance to match the transmittance through the volume at.

"""
                hidden = false
            )
            bool inputs:use_diffuse_layer = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Volume"
                displayName = "Use diffuse layer"
                doc = """When set, simulates a diffuse layer on top of the material

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Red_Normal_Type_15"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Red_Normal_Type_15/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Red_Normal_Type_15/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Red_Normal_Type_15/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = """Index of Refraction of the material

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_15_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            color3f inputs:transmittance_color = (0.9647059, 0.20392157, 0.03137255) (
                customData = {
                    float3 default = (0.97, 0.97, 0.97)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color"
                doc = """Expected transmittance after the specified transmittance distance through the volume.

"""
                hidden = false
                renderType = "color"
            )
            float inputs:transmittance_measurement_distance = 0.003 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 65504
                        float min = 0.001
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Measurement Distance"
                doc = """Distance to match the transmittance through the volume at.

"""
                hidden = false
            )
            bool inputs:use_diffuse_layer = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Volume"
                displayName = "Use diffuse layer"
                doc = """When set, simulates a diffuse layer on top of the material

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Red_Normal_Type_16"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Red_Normal_Type_16/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Red_Normal_Type_16/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Red_Normal_Type_16/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = """Index of Refraction of the material

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_16_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            color3f inputs:transmittance_color = (0.9647059, 0.20392157, 0.03137255) (
                customData = {
                    float3 default = (0.97, 0.97, 0.97)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color"
                doc = """Expected transmittance after the specified transmittance distance through the volume.

"""
                hidden = false
                renderType = "color"
            )
            float inputs:transmittance_measurement_distance = 0.003 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 65504
                        float min = 0.001
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Measurement Distance"
                doc = """Distance to match the transmittance through the volume at.

"""
                hidden = false
            )
            bool inputs:use_diffuse_layer = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Volume"
                displayName = "Use diffuse layer"
                doc = """When set, simulates a diffuse layer on top of the material

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Red_Normal_Type_17"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Red_Normal_Type_17/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Red_Normal_Type_17/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Red_Normal_Type_17/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = """Index of Refraction of the material

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_17_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            color3f inputs:transmittance_color = (0.9647059, 0.20392157, 0.03137255) (
                customData = {
                    float3 default = (0.97, 0.97, 0.97)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color"
                doc = """Expected transmittance after the specified transmittance distance through the volume.

"""
                hidden = false
                renderType = "color"
            )
            float inputs:transmittance_measurement_distance = 0.003 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 65504
                        float min = 0.001
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Measurement Distance"
                doc = """Distance to match the transmittance through the volume at.

"""
                hidden = false
            )
            bool inputs:use_diffuse_layer = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Volume"
                displayName = "Use diffuse layer"
                doc = """When set, simulates a diffuse layer on top of the material

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Red_Normal_Type_18"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Red_Normal_Type_18/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Red_Normal_Type_18/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Red_Normal_Type_18/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = """Index of Refraction of the material

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_18_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            color3f inputs:transmittance_color = (0.9647059, 0.20392157, 0.03137255) (
                customData = {
                    float3 default = (0.97, 0.97, 0.97)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color"
                doc = """Expected transmittance after the specified transmittance distance through the volume.

"""
                hidden = false
                renderType = "color"
            )
            float inputs:transmittance_measurement_distance = 0.003 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 65504
                        float min = 0.001
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Measurement Distance"
                doc = """Distance to match the transmittance through the volume at.

"""
                hidden = false
            )
            bool inputs:use_diffuse_layer = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Volume"
                displayName = "Use diffuse layer"
                doc = """When set, simulates a diffuse layer on top of the material

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Red_Normal_Type_19"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Red_Normal_Type_19/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Red_Normal_Type_19/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Red_Normal_Type_19/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = """Index of Refraction of the material

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_19_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            color3f inputs:transmittance_color = (0.9647059, 0.20392157, 0.03137255) (
                customData = {
                    float3 default = (0.97, 0.97, 0.97)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color"
                doc = """Expected transmittance after the specified transmittance distance through the volume.

"""
                hidden = false
                renderType = "color"
            )
            float inputs:transmittance_measurement_distance = 0.003 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 65504
                        float min = 0.001
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Measurement Distance"
                doc = """Distance to match the transmittance through the volume at.

"""
                hidden = false
            )
            bool inputs:use_diffuse_layer = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Volume"
                displayName = "Use diffuse layer"
                doc = """When set, simulates a diffuse layer on top of the material

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Red_Normal_Type_23"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Red_Normal_Type_23/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Red_Normal_Type_23/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Red_Normal_Type_23/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = """Index of Refraction of the material

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_23_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            color3f inputs:transmittance_color = (0.9647059, 0.20392157, 0.03137255) (
                customData = {
                    float3 default = (0.97, 0.97, 0.97)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color"
                doc = """Expected transmittance after the specified transmittance distance through the volume.

"""
                hidden = false
                renderType = "color"
            )
            float inputs:transmittance_measurement_distance = 0.003 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 65504
                        float min = 0.001
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Measurement Distance"
                doc = """Distance to match the transmittance through the volume at.

"""
                hidden = false
            )
            bool inputs:use_diffuse_layer = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Volume"
                displayName = "Use diffuse layer"
                doc = """When set, simulates a diffuse layer on top of the material

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Orange"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Orange/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Orange/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Orange/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = """Index of Refraction of the material

"""
                hidden = false
            )
            color3f inputs:transmittance_color = (0.9490196, 0.43073663, 0.1254902) (
                customData = {
                    float3 default = (0.97, 0.97, 0.97)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color"
                doc = """Expected transmittance after the specified transmittance distance through the volume.

"""
                hidden = false
                renderType = "color"
            )
            float inputs:transmittance_measurement_distance = 0.003 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 65504
                        float min = 0.001
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Measurement Distance"
                doc = """Distance to match the transmittance through the volume at.

"""
                hidden = false
            )
            asset inputs:transmittance_texture = @./glass_orange_albedo.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color/Diffuse Albedo Texture"
                doc = """Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer

"""
                hidden = false
                renderType = "texture_2d"
            )
            bool inputs:use_diffuse_layer = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Volume"
                displayName = "Use diffuse layer"
                doc = """When set, simulates a diffuse layer on top of the material

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Orange_Normal_Type_02"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Orange_Normal_Type_02/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Orange_Normal_Type_02/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Orange_Normal_Type_02/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = """Index of Refraction of the material

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_Type_02_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            color3f inputs:transmittance_color = (0.9490196, 0.43073663, 0.1254902) (
                customData = {
                    float3 default = (0.97, 0.97, 0.97)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color"
                doc = """Expected transmittance after the specified transmittance distance through the volume.

"""
                hidden = false
                renderType = "color"
            )
            float inputs:transmittance_measurement_distance = 0.003 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 65504
                        float min = 0.001
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Measurement Distance"
                doc = """Distance to match the transmittance through the volume at.

"""
                hidden = false
            )
            asset inputs:transmittance_texture = @@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color/Diffuse Albedo Texture"
                doc = """Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer

"""
                hidden = false
                renderType = "texture_2d"
            )
            bool inputs:use_diffuse_layer = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Volume"
                displayName = "Use diffuse layer"
                doc = """When set, simulates a diffuse layer on top of the material

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Orange_Normal_Type_03"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Orange_Normal_Type_03/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Orange_Normal_Type_03/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Orange_Normal_Type_03/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = """Index of Refraction of the material

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_Type_03_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            color3f inputs:transmittance_color = (0.9490196, 0.43073663, 0.1254902) (
                customData = {
                    float3 default = (0.97, 0.97, 0.97)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color"
                doc = """Expected transmittance after the specified transmittance distance through the volume.

"""
                hidden = false
                renderType = "color"
            )
            float inputs:transmittance_measurement_distance = 0.003 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 65504
                        float min = 0.001
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Measurement Distance"
                doc = """Distance to match the transmittance through the volume at.

"""
                hidden = false
            )
            asset inputs:transmittance_texture = @@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color/Diffuse Albedo Texture"
                doc = """Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer

"""
                hidden = false
                renderType = "texture_2d"
            )
            bool inputs:use_diffuse_layer = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Volume"
                displayName = "Use diffuse layer"
                doc = """When set, simulates a diffuse layer on top of the material

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Orange_Normal_Type_04"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Orange_Normal_Type_04/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Orange_Normal_Type_04/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Orange_Normal_Type_04/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = """Index of Refraction of the material

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_04_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            color3f inputs:transmittance_color = (0.9490196, 0.43073663, 0.1254902) (
                customData = {
                    float3 default = (0.97, 0.97, 0.97)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color"
                doc = """Expected transmittance after the specified transmittance distance through the volume.

"""
                hidden = false
                renderType = "color"
            )
            float inputs:transmittance_measurement_distance = 0.003 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 65504
                        float min = 0.001
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Measurement Distance"
                doc = """Distance to match the transmittance through the volume at.

"""
                hidden = false
            )
            asset inputs:transmittance_texture = @@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color/Diffuse Albedo Texture"
                doc = """Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer

"""
                hidden = false
                renderType = "texture_2d"
            )
            bool inputs:use_diffuse_layer = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Volume"
                displayName = "Use diffuse layer"
                doc = """When set, simulates a diffuse layer on top of the material

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Orange_Normal_Type_11"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Orange_Normal_Type_11/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Orange_Normal_Type_11/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Orange_Normal_Type_11/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = """Index of Refraction of the material

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_11_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            color3f inputs:transmittance_color = (0.9490196, 0.43073663, 0.1254902) (
                customData = {
                    float3 default = (0.97, 0.97, 0.97)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color"
                doc = """Expected transmittance after the specified transmittance distance through the volume.

"""
                hidden = false
                renderType = "color"
            )
            float inputs:transmittance_measurement_distance = 0.003 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 65504
                        float min = 0.001
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Measurement Distance"
                doc = """Distance to match the transmittance through the volume at.

"""
                hidden = false
            )
            asset inputs:transmittance_texture = @@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color/Diffuse Albedo Texture"
                doc = """Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer

"""
                hidden = false
                renderType = "texture_2d"
            )
            bool inputs:use_diffuse_layer = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Volume"
                displayName = "Use diffuse layer"
                doc = """When set, simulates a diffuse layer on top of the material

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Orange_Normal_Type_12"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Orange_Normal_Type_12/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Orange_Normal_Type_12/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Orange_Normal_Type_12/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = """Index of Refraction of the material

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_12_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            color3f inputs:transmittance_color = (0.9490196, 0.43073663, 0.1254902) (
                customData = {
                    float3 default = (0.97, 0.97, 0.97)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color"
                doc = """Expected transmittance after the specified transmittance distance through the volume.

"""
                hidden = false
                renderType = "color"
            )
            float inputs:transmittance_measurement_distance = 0.003 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 65504
                        float min = 0.001
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Measurement Distance"
                doc = """Distance to match the transmittance through the volume at.

"""
                hidden = false
            )
            asset inputs:transmittance_texture = @@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color/Diffuse Albedo Texture"
                doc = """Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer

"""
                hidden = false
                renderType = "texture_2d"
            )
            bool inputs:use_diffuse_layer = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Volume"
                displayName = "Use diffuse layer"
                doc = """When set, simulates a diffuse layer on top of the material

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Orange_Normal_Type_23"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Orange_Normal_Type_23/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Orange_Normal_Type_23/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Orange_Normal_Type_23/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = """Index of Refraction of the material

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_23_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            color3f inputs:transmittance_color = (0.9490196, 0.43073663, 0.1254902) (
                customData = {
                    float3 default = (0.97, 0.97, 0.97)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color"
                doc = """Expected transmittance after the specified transmittance distance through the volume.

"""
                hidden = false
                renderType = "color"
            )
            float inputs:transmittance_measurement_distance = 0.003 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 65504
                        float min = 0.001
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Measurement Distance"
                doc = """Distance to match the transmittance through the volume at.

"""
                hidden = false
            )
            asset inputs:transmittance_texture = @@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color/Diffuse Albedo Texture"
                doc = """Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer

"""
                hidden = false
                renderType = "texture_2d"
            )
            bool inputs:use_diffuse_layer = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Volume"
                displayName = "Use diffuse layer"
                doc = """When set, simulates a diffuse layer on top of the material

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Orange_Normal_Type_24"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Orange_Normal_Type_24/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Orange_Normal_Type_24/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Orange_Normal_Type_24/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = """Index of Refraction of the material

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_24_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            color3f inputs:transmittance_color = (0.9490196, 0.43073663, 0.1254902) (
                customData = {
                    float3 default = (0.97, 0.97, 0.97)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color"
                doc = """Expected transmittance after the specified transmittance distance through the volume.

"""
                hidden = false
                renderType = "color"
            )
            float inputs:transmittance_measurement_distance = 0.003 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 65504
                        float min = 0.001
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Measurement Distance"
                doc = """Distance to match the transmittance through the volume at.

"""
                hidden = false
            )
            asset inputs:transmittance_texture = @@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color/Diffuse Albedo Texture"
                doc = """Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer

"""
                hidden = false
                renderType = "texture_2d"
            )
            bool inputs:use_diffuse_layer = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Volume"
                displayName = "Use diffuse layer"
                doc = """When set, simulates a diffuse layer on top of the material

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Yellow"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Yellow/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Yellow/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Yellow/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.5999999 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = """Index of Refraction of the material

"""
                hidden = false
            )
            color3f inputs:transmittance_color = (0.9490196, 0.6039216, 0.1254902) (
                customData = {
                    float3 default = (0.97, 0.97, 0.97)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color"
                doc = """Expected transmittance after the specified transmittance distance through the volume.

"""
                hidden = false
                renderType = "color"
            )
            float inputs:transmittance_measurement_distance = 0.003 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 65504
                        float min = 0.001
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Measurement Distance"
                doc = """Distance to match the transmittance through the volume at.

"""
                hidden = false
            )
            asset inputs:transmittance_texture = @./glass_yellow_albedo.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color/Diffuse Albedo Texture"
                doc = """Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer

"""
                hidden = false
                renderType = "texture_2d"
            )
            bool inputs:use_diffuse_layer = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Volume"
                displayName = "Use diffuse layer"
                doc = """When set, simulates a diffuse layer on top of the material

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Yellow_Normal_Type_02"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Yellow_Normal_Type_02/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Yellow_Normal_Type_02/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Yellow_Normal_Type_02/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = """Index of Refraction of the material

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_Type_02_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            color3f inputs:transmittance_color = (0.9490196, 0.6039216, 0.1254902) (
                customData = {
                    float3 default = (0.97, 0.97, 0.97)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color"
                doc = """Expected transmittance after the specified transmittance distance through the volume.

"""
                hidden = false
                renderType = "color"
            )
            float inputs:transmittance_measurement_distance = 0.003 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 65504
                        float min = 0.001
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Measurement Distance"
                doc = """Distance to match the transmittance through the volume at.

"""
                hidden = false
            )
            asset inputs:transmittance_texture = @./glass_yellow_albedo.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color/Diffuse Albedo Texture"
                doc = """Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer

"""
                hidden = false
                renderType = "texture_2d"
            )
            bool inputs:use_diffuse_layer = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Volume"
                displayName = "Use diffuse layer"
                doc = """When set, simulates a diffuse layer on top of the material

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Yellow_Normal_Type_03"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Yellow_Normal_Type_03/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Yellow_Normal_Type_03/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Yellow_Normal_Type_03/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = """Index of Refraction of the material

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_Type_03_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            color3f inputs:transmittance_color = (0.9490196, 0.6039216, 0.1254902) (
                customData = {
                    float3 default = (0.97, 0.97, 0.97)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color"
                doc = """Expected transmittance after the specified transmittance distance through the volume.

"""
                hidden = false
                renderType = "color"
            )
            float inputs:transmittance_measurement_distance = 0.003 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 65504
                        float min = 0.001
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Measurement Distance"
                doc = """Distance to match the transmittance through the volume at.

"""
                hidden = false
            )
            asset inputs:transmittance_texture = @./glass_yellow_albedo.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color/Diffuse Albedo Texture"
                doc = """Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer

"""
                hidden = false
                renderType = "texture_2d"
            )
            bool inputs:use_diffuse_layer = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Volume"
                displayName = "Use diffuse layer"
                doc = """When set, simulates a diffuse layer on top of the material

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Yellow_Normal_Type_04"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Yellow_Normal_Type_04/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Yellow_Normal_Type_04/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Yellow_Normal_Type_04/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = """Index of Refraction of the material

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_04_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            color3f inputs:transmittance_color = (0.9490196, 0.6039216, 0.1254902) (
                customData = {
                    float3 default = (0.97, 0.97, 0.97)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color"
                doc = """Expected transmittance after the specified transmittance distance through the volume.

"""
                hidden = false
                renderType = "color"
            )
            float inputs:transmittance_measurement_distance = 0.003 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 65504
                        float min = 0.001
                    }
                }
                displayGroup = "Volume"
                displayName = "Transmittance Measurement Distance"
                doc = """Distance to match the transmittance through the volume at.

"""
                hidden = false
            )
            asset inputs:transmittance_texture = @./glass_yellow_albedo.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Volume"
                displayName = "Transmittance Color/Diffuse Albedo Texture"
                doc = """Texture map for either the transmittance color of the material, or the albedo color of the diffuse layer

"""
                hidden = false
                renderType = "texture_2d"
            )
            bool inputs:use_diffuse_layer = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Volume"
                displayName = "Use diffuse layer"
                doc = """When set, simulates a diffuse layer on top of the material

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Chrome"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Chrome/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Chrome/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Chrome/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.6, 0.6, 0.6) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.6, 0.6, 0.6) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_Combined_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_and_Height"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_and_Height/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_and_Height/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_and_Height/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.6, 0.6, 0.6) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:displace_in = 0.05 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 255
                        float min = 0
                    }
                }
                displayGroup = "Displacement"
                displayName = "Inwards Displacement"
                doc = """Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep.
This parameter is unused.
"""
                hidden = false
            )
            asset inputs:height_texture = @./CarSharedNormals_Combined_height.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Displacement"
                displayName = "Height Map"
                doc = """A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point.
This parameter is unused.
"""
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_Combined_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Type_01"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Type_01/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Type_01/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Type_01/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.6, 0.6, 0.6) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_01_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Type_02"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Type_02/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Type_02/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Type_02/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.6, 0.6, 0.6) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_02_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Type_03"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Type_03/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Type_03/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Type_03/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.6, 0.6, 0.6) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_03_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Type_04"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Type_04/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Type_04/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Type_04/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.6, 0.6, 0.6) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_04_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Type_05"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Type_05/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Type_05/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Type_05/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.6, 0.6, 0.6) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_05_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Type_06"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Type_06/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Type_06/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Type_06/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.6, 0.6, 0.6) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_06_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Type_07"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Type_07/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Type_07/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Type_07/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.6, 0.6, 0.6) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_07_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Type_08"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Type_08/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Type_08/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Type_08/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.6, 0.6, 0.6) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_08_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Type_09"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Type_09/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Type_09/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Type_09/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.6, 0.6, 0.6) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_09_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Type_10"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Type_10/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Type_10/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Type_10/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.6, 0.6, 0.6) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_10_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Type_11"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Type_11/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Type_11/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Type_11/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.6, 0.6, 0.6) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_11_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Type_23"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Type_23/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Type_23/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Type_23/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.6, 0.6, 0.6) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_23_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Red_Chrome"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Red_Chrome/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Red_Chrome/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Red_Chrome/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (1, 0, 0) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
        }
    }

    def Material "Reflector_Red_Normal"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Red_Normal/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Red_Normal/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Red_Normal/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0, 0) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_Combined_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
        }
    }

    def Material "Reflector_Red_Normal_and_Height"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Red_Normal_and_Height/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Red_Normal_and_Height/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Red_Normal_and_Height/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0, 0) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:displace_in = 0.05 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 255
                        float min = 0
                    }
                }
                displayGroup = "Displacement"
                displayName = "Inwards Displacement"
                doc = """Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep.
This parameter is unused.
"""
                hidden = false
            )
            asset inputs:height_texture = @./CarSharedNormals_Combined_height.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Displacement"
                displayName = "Height Map"
                doc = """A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point.
This parameter is unused.
"""
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_Combined_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
        }
    }

    def Material "Reflector_Red_Normal_Type_01"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Red_Normal_Type_01/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Red_Normal_Type_01/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Red_Normal_Type_01/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0, 0) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_01_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
        }
    }

    def Material "Reflector_Red_Normal_Type_02"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Red_Normal_Type_02/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Red_Normal_Type_02/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Red_Normal_Type_02/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0, 0) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_02_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
        }
    }

    def Material "Reflector_Red_Normal_Type_03"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Red_Normal_Type_03/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Red_Normal_Type_03/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Red_Normal_Type_03/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0, 0) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_03_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
        }
    }

    def Material "Reflector_Red_Normal_Type_04"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Red_Normal_Type_04/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Red_Normal_Type_04/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Red_Normal_Type_04/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0, 0) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_04_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
        }
    }

    def Material "Reflector_Red_Normal_Type_05"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Red_Normal_Type_05/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Red_Normal_Type_05/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Red_Normal_Type_05/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0, 0) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_05_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
        }
    }

    def Material "Reflector_Red_Normal_Type_06"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Red_Normal_Type_06/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Red_Normal_Type_06/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Red_Normal_Type_06/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0, 0) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_06_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
        }
    }

    def Material "Reflector_Red_Normal_Type_07"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Red_Normal_Type_07/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Red_Normal_Type_07/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Red_Normal_Type_07/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0, 0) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_07_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
        }
    }

    def Material "Reflector_Red_Normal_Type_08"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Red_Normal_Type_08/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Red_Normal_Type_08/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Red_Normal_Type_08/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0, 0) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_08_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
        }
    }

    def Material "Reflector_Red_Normal_Type_09"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Red_Normal_Type_09/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Red_Normal_Type_09/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Red_Normal_Type_09/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0, 0) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_09_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
        }
    }

    def Material "Reflector_Red_Normal_Type_10"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Red_Normal_Type_10/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Red_Normal_Type_10/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Red_Normal_Type_10/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0, 0) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_10_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
        }
    }

    def Material "Reflector_Red_Normal_Type_11"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Red_Normal_Type_11/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Red_Normal_Type_11/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Red_Normal_Type_11/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0, 0) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_11_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
        }
    }

    def Material "Reflector_Red_Normal_Type_27"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Red_Normal_Type_27/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Red_Normal_Type_27/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Red_Normal_Type_27/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0, 0) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_27_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
        }
    }

    def Material "Reflector_Orange_Chrome"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Orange_Chrome/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Orange_Chrome/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Orange_Chrome/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9019608, 0.3764706, 0) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
        }
    }

    def Material "Reflector_Orange_Normal"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Orange_Normal/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Orange_Normal/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Orange_Normal/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0.37528953, 0) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_Combined_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
        }
    }

    def Material "Reflector_Orange_Normal_and_Height"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Orange_Normal_and_Height/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Orange_Normal_and_Height/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Orange_Normal_and_Height/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0.37528953, 0) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:displace_in = 0.05 (
                customData = {
                    float default = 1
                    dictionary range = {
                        float max = 255
                        float min = 0
                    }
                }
                displayGroup = "Displacement"
                displayName = "Inwards Displacement"
                doc = """Ratio of UV width to depth.  If the texture is displayed as 1 meter wide, then a value of 1 means it can be at most 1 meter deep.  A value of 0.1 means that same 1 meter wide quad can be at most 0.1 meters deep.
This parameter is unused.
"""
                hidden = false
            )
            asset inputs:height_texture = @./CarSharedNormals_Combined_height.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Displacement"
                displayName = "Height Map"
                doc = """A pixel value of 0 is the lowest point.  A pixel value of 1 will be the highest point.
This parameter is unused.
"""
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_Combined_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
        }
    }

    def Material "Reflector_Orange_Normal_Type_01"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Orange_Normal_Type_01/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Orange_Normal_Type_01/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Orange_Normal_Type_01/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0.37528953, 0) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_01_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
        }
    }

    def Material "Reflector_Orange_Normal_Type_02"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Orange_Normal_Type_02/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Orange_Normal_Type_02/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Orange_Normal_Type_02/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0.37528953, 0) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_02_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
        }
    }

    def Material "Reflector_Orange_Normal_Type_03"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Orange_Normal_Type_03/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Orange_Normal_Type_03/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Orange_Normal_Type_03/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0.37528953, 0) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_03_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
        }
    }

    def Material "Reflector_Orange_Normal_Type_04"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Orange_Normal_Type_04/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Orange_Normal_Type_04/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Orange_Normal_Type_04/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0.37528953, 0) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_04_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
        }
    }

    def Material "Reflector_Orange_Normal_Type_05"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Orange_Normal_Type_05/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Orange_Normal_Type_05/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Orange_Normal_Type_05/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0.37528953, 0) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_05_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
        }
    }

    def Material "Reflector_Orange_Normal_Type_06"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Orange_Normal_Type_06/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Orange_Normal_Type_06/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Orange_Normal_Type_06/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0.37528953, 0) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_06_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
        }
    }

    def Material "Reflector_Orange_Normal_Type_07"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Orange_Normal_Type_07/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Orange_Normal_Type_07/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Orange_Normal_Type_07/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0.37528953, 0) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_07_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
        }
    }

    def Material "Reflector_Orange_Normal_Type_08"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Orange_Normal_Type_08/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Orange_Normal_Type_08/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Orange_Normal_Type_08/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0.37528953, 0) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_08_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
        }
    }

    def Material "Reflector_Orange_Normal_Type_09"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Orange_Normal_Type_09/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Orange_Normal_Type_09/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Orange_Normal_Type_09/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0.37528953, 0) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_09_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
        }
    }

    def Material "Reflector_Orange_Normal_Type_10"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Orange_Normal_Type_10/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Orange_Normal_Type_10/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Orange_Normal_Type_10/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0.37528953, 0) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_10_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
        }
    }

    def Material "Reflector_Orange_Normal_Type_11"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Orange_Normal_Type_11/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Orange_Normal_Type_11/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Orange_Normal_Type_11/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0.37528953, 0) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.95 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_type_11_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
        }
    }

    def Material "Reflector_Rough_Normal"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Rough_Normal/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Rough_Normal/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Rough_Normal/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.6, 0.6, 0.6) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.79999995 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_Combined_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0.19999999 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_More_Rough_Normal"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_More_Rough_Normal/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_More_Rough_Normal/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_More_Rough_Normal/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.6, 0.6, 0.6) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Base Material"
                displayName = "Albedo Color"
                doc = """The base albedo color.  (Used if no texture is specified)

"""
                hidden = false
                renderType = "color"
            )
            float inputs:metallic_constant = 0.79999995 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Metallic Amount"
                doc = """How metallic is this material, 0 for not at all, 1 for fully metallic. (Used if no texture is specified).

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./CarSharedNormals_Combined_normal.dds@ (
                customData = {
                    asset default = @@
                }
                displayGroup = "Base Material"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0.5 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Base Material"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections, use 0 for perfectly smooth.  (Used if no texture is specified).

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }
}

