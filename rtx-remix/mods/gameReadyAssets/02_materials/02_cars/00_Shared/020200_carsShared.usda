#usda 1.0
(
    subLayers = [
        @./Effect/020200_Effects.usda@,
        @./Glass/020200_carsSharedGlass.usda@,
        @./Decals/020200_carsSharedDecals.usda@,
        @./Metal/020200_carsSharedMetal.usda@,
        @./Carpaint/020200_carsSharedCarpaint.usda@,
        @./CarWheel/020200_carsSharedCarWheel.usda@
    ]
    upAxis = "Z"
)

def "Looks" (
    prepend apiSchemas = ["MaterialBindingAPI"]
)
{
    def Material "placeholder_Transparent"
    {
        token outputs:mdl:displacement.connect = </Looks/placeholder_Transparent/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/placeholder_Transparent/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/placeholder_Transparent/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.000001, 9.9999e-7, 9.9999e-7)
            float inputs:opacity_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Chrome_Shiny"
    {
        token outputs:mdl:displacement.connect = </Looks/Chrome_Shiny/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Chrome_Shiny/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Chrome_Shiny/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8)
            float inputs:metallic_constant = 0.79999995
            float inputs:reflection_roughness_constant = 0.099999994
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Chrome_Rough"
    {
        token outputs:mdl:displacement.connect = </Looks/Chrome_Rough/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Chrome_Rough/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Chrome_Rough/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8)
            float inputs:metallic_constant = 0.79999995
            float inputs:reflection_roughness_constant = 0.19999999
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Chrome_More_Rough"
    {
        token outputs:mdl:displacement.connect = </Looks/Chrome_More_Rough/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Chrome_More_Rough/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Chrome_More_Rough/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.6, 0.6, 0.6)
            float inputs:metallic_constant = 0.79999995
            float inputs:reflection_roughness_constant = 0.5
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Plastic_White"
    {
        token outputs:mdl:displacement.connect = </Looks/Plastic_White/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Plastic_White/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Plastic_White/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.95366794, 0.9536584, 0.9536584)
            float inputs:reflection_roughness_constant = 0.59999996
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Plastic_Black"
    {
        token outputs:mdl:displacement.connect = </Looks/Plastic_Black/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Plastic_Black/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Plastic_Black/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.05, 0.0499995, 0.0499995)
            float inputs:reflection_roughness_constant = 0.59999996
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "License_Plate"
    {
        token outputs:mdl:displacement.connect = </Looks/License_Plate/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/License_Plate/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/License_Plate/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            asset inputs:diffuse_texture = @./License_Plate_albedo.dds@
            float inputs:displace_in = 0.02
            asset inputs:height_texture = @./License_Plate_height.dds@
            asset inputs:metallic_texture = @./License_Plate_metal.dds@
            asset inputs:normalmap_texture = @./License_Plate_normal.dds@
            asset inputs:reflectionroughness_texture = @./License_Plate_rough.dds@
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Chrome"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Chrome/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Chrome/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Chrome/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8)
            float inputs:metallic_constant = 0.95
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8)
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_Combined_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_and_Height"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_and_Height/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_and_Height/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_and_Height/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8)
            float inputs:displace_in = 0.05
            asset inputs:height_texture = @./CarSharedNormals_Combined_height.dds@
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_Combined_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Type_01"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Type_01/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Type_01/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Type_01/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8)
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_type_01_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Type_02"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Type_02/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Type_02/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Type_02/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8)
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_type_02_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Type_03"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Type_03/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Type_03/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Type_03/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8)
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_type_03_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Type_04"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Type_04/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Type_04/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Type_04/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8)
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_type_04_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Type_05"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Type_05/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Type_05/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Type_05/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8)
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_type_05_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Type_06"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Type_06/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Type_06/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Type_06/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8)
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_type_06_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Type_07"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Type_07/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Type_07/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Type_07/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8)
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_type_07_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Type_08"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Type_08/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Type_08/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Type_08/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8)
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_type_08_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Type_09"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Type_09/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Type_09/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Type_09/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8)
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_type_09_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Type_10"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Type_10/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Type_10/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Type_10/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8)
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_type_10_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Type_11"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Type_11/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Type_11/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Type_11/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8)
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_type_11_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Chrome_Red"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Chrome_Red/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Chrome_Red/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Chrome_Red/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8)
            float inputs:metallic_constant = 0.95
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Red"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Red/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Red/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Red/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0, 0)
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_Combined_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Red_and_Height"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Red_and_Height/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Red_and_Height/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Red_and_Height/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0, 0)
            float inputs:displace_in = 0.05
            asset inputs:height_texture = @./CarSharedNormals_Combined_height.dds@
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_Combined_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Red_Type_01"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Red_Type_01/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Red_Type_01/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Red_Type_01/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0, 0)
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_type_01_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Red_Type_02"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Red_Type_02/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Red_Type_02/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Red_Type_02/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0, 0)
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_type_02_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Red_Type_03"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Red_Type_03/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Red_Type_03/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Red_Type_03/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0, 0)
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_type_03_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Red_Type_04"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Red_Type_04/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Red_Type_04/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Red_Type_04/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0, 0)
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_type_04_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Red_Type_05"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Red_Type_05/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Red_Type_05/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Red_Type_05/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0, 0)
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_type_05_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Red_Type_06"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Red_Type_06/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Red_Type_06/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Red_Type_06/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0, 0)
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_type_06_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Red_Type_07"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Red_Type_07/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Red_Type_07/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Red_Type_07/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0, 0)
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_type_07_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Red_Type_08"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Red_Type_08/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Red_Type_08/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Red_Type_08/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0, 0)
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_type_08_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Red_Type_09"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Red_Type_09/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Red_Type_09/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Red_Type_09/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0, 0)
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_type_09_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Red_Type_10"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Red_Type_10/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Red_Type_10/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Red_Type_10/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0, 0)
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_type_10_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Red_Type_11"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Red_Type_11/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Red_Type_11/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Red_Type_11/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0, 0)
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_type_11_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Chrome_Orange"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Chrome_Orange/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Chrome_Orange/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Chrome_Orange/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8)
            float inputs:metallic_constant = 0.95
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Orange"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Orange/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Orange/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Orange/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0.37528953, 0)
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_Combined_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Orange_and_Height"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Orange_and_Height/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Orange_and_Height/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Orange_and_Height/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0.37528953, 0)
            float inputs:displace_in = 0.05
            asset inputs:height_texture = @./CarSharedNormals_Combined_height.dds@
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_Combined_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Orange_Type_01"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Orange_Type_01/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Orange_Type_01/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Orange_Type_01/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0.37528953, 0)
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_type_01_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Orange_Type_02"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Orange_Type_02/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Orange_Type_02/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Orange_Type_02/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0.37528953, 0)
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_type_02_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Orange_Type_03"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Orange_Type_03/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Orange_Type_03/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Orange_Type_03/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0.37528953, 0)
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_type_03_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Orange_Type_04"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Orange_Type_04/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Orange_Type_04/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Orange_Type_04/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0.37528953, 0)
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_type_04_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Orange_Type_05"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Orange_Type_05/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Orange_Type_05/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Orange_Type_05/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0.37528953, 0)
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_type_05_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Orange_Type_06"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Orange_Type_06/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Orange_Type_06/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Orange_Type_06/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0.37528953, 0)
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_type_06_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Orange_Type_07"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Orange_Type_07/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Orange_Type_07/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Orange_Type_07/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0.37528953, 0)
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_type_07_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Orange_Type_08"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Orange_Type_08/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Orange_Type_08/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Orange_Type_08/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0.37528953, 0)
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_type_08_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Orange_Type_09"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Orange_Type_09/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Orange_Type_09/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Orange_Type_09/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0.37528953, 0)
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_type_09_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Orange_Type_10"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Orange_Type_10/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Orange_Type_10/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Orange_Type_10/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0.37528953, 0)
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_type_10_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Reflector_Normal_Orange_Type_11"
    {
        token outputs:mdl:displacement.connect = </Looks/Reflector_Normal_Orange_Type_11/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Reflector_Normal_Orange_Type_11/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Reflector_Normal_Orange_Type_11/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.9, 0.37528953, 0)
            float inputs:metallic_constant = 0.95
            asset inputs:normalmap_texture = @./CarSharedNormals_type_11_normal.dds@
            float inputs:reflection_roughness_constant = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Clear"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Clear/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Clear/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Clear/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.5999999
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Clear_Normal_Type_02"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Clear_Normal_Type_02/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Clear_Normal_Type_02/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Clear_Normal_Type_02/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6
            asset inputs:normalmap_texture = @./CarSharedNormals_Type_02_normal.dds@
            color3f inputs:transmittance_color = (0.97, 0.97, 0.97)
            float inputs:transmittance_measurement_distance = 1
            asset inputs:transmittance_texture = @@
            bool inputs:use_diffuse_layer = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Clear_Normal_Type_04"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Clear_Normal_Type_04/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Clear_Normal_Type_04/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Clear_Normal_Type_04/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6
            asset inputs:normalmap_texture = @./CarSharedNormals_type_04_normal.dds@
            color3f inputs:transmittance_color = (0.97, 0.97, 0.97)
            float inputs:transmittance_measurement_distance = 1
            asset inputs:transmittance_texture = @@
            bool inputs:use_diffuse_layer = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Red"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Red/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Red/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Red/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.5999999
            color3f inputs:transmittance_color = (1, 0, 0)
            float inputs:transmittance_measurement_distance = 0.004
            asset inputs:transmittance_texture = @./glass_red_albedo.dds@
            bool inputs:use_diffuse_layer = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Red_Pale"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Red_Pale/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Red_Pale/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Red_Pale/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.5999999
            color3f inputs:transmittance_color = (0.9189189, 0.3796306, 0.3796306)
            float inputs:transmittance_measurement_distance = 0.004
            asset inputs:transmittance_texture = @./glass_red_albedo.dds@
            bool inputs:use_diffuse_layer = 0
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Red_Normal_Type_02"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Red_Normal_Type_02/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Red_Normal_Type_02/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Red_Normal_Type_02/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6
            asset inputs:normalmap_texture = @./CarSharedNormals_Type_02_normal.dds@
            color3f inputs:transmittance_color = (0.96525097, 0.20317739, 0.029814692)
            float inputs:transmittance_measurement_distance = 0.003
            asset inputs:transmittance_texture = @@
            bool inputs:use_diffuse_layer = 1
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Red_Normal_Type_04"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Red_Normal_Type_04/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Red_Normal_Type_04/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Red_Normal_Type_04/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6
            asset inputs:normalmap_texture = @./CarSharedNormals_type_04_normal.dds@
            color3f inputs:transmittance_color = (0.96525097, 0.20317739, 0.029814692)
            float inputs:transmittance_measurement_distance = 0.003
            asset inputs:transmittance_texture = @@
            bool inputs:use_diffuse_layer = 1
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Red_Normal_Type_11"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Red_Normal_Type_11/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Red_Normal_Type_11/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Red_Normal_Type_11/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6
            asset inputs:normalmap_texture = @./CarSharedNormals_type_11_normal.dds@
            color3f inputs:transmittance_color = (0.9647059, 0.20392157, 0.03137255)
            float inputs:transmittance_measurement_distance = 0.003
            asset inputs:transmittance_texture = @@
            bool inputs:use_diffuse_layer = 1
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Red_Normal_Type_12"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Red_Normal_Type_12/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Red_Normal_Type_12/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Red_Normal_Type_12/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6
            asset inputs:normalmap_texture = @./CarSharedNormals_type_12_normal.dds@
            color3f inputs:transmittance_color = (0.96525097, 0.20317739, 0.029814692)
            float inputs:transmittance_measurement_distance = 0.003
            asset inputs:transmittance_texture = @@
            bool inputs:use_diffuse_layer = 1
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Red_Normal_Type_13"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Red_Normal_Type_13/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Red_Normal_Type_13/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Red_Normal_Type_13/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6
            asset inputs:normalmap_texture = @./CarSharedNormals_type_13_normal.dds@
            color3f inputs:transmittance_color = (0.96525097, 0.20317739, 0.029814692)
            float inputs:transmittance_measurement_distance = 0.003
            asset inputs:transmittance_texture = @@
            bool inputs:use_diffuse_layer = 1
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Red_Normal_Type_14"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Red_Normal_Type_14/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Red_Normal_Type_14/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Red_Normal_Type_14/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6
            asset inputs:normalmap_texture = @./CarSharedNormals_type_14_normal.dds@
            color3f inputs:transmittance_color = (0.96525097, 0.20317739, 0.029814692)
            float inputs:transmittance_measurement_distance = 0.003
            asset inputs:transmittance_texture = @@
            bool inputs:use_diffuse_layer = 1
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Red_Normal_Type_15"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Red_Normal_Type_15/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Red_Normal_Type_15/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Red_Normal_Type_15/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6
            asset inputs:normalmap_texture = @./CarSharedNormals_type_15_normal.dds@
            color3f inputs:transmittance_color = (0.96525097, 0.20317739, 0.029814692)
            float inputs:transmittance_measurement_distance = 0.003
            asset inputs:transmittance_texture = @@
            bool inputs:use_diffuse_layer = 1
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Red_Normal_Type_16"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Red_Normal_Type_16/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Red_Normal_Type_16/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Red_Normal_Type_16/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6
            asset inputs:normalmap_texture = @./CarSharedNormals_type_16_normal.dds@
            color3f inputs:transmittance_color = (0.96525097, 0.20317739, 0.029814692)
            float inputs:transmittance_measurement_distance = 0.003
            asset inputs:transmittance_texture = @@
            bool inputs:use_diffuse_layer = 1
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Red_Normal_Type_17"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Red_Normal_Type_17/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Red_Normal_Type_17/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Red_Normal_Type_17/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6
            asset inputs:normalmap_texture = @./CarSharedNormals_type_17_normal.dds@
            color3f inputs:transmittance_color = (0.96525097, 0.20317739, 0.029814692)
            float inputs:transmittance_measurement_distance = 0.003
            asset inputs:transmittance_texture = @@
            bool inputs:use_diffuse_layer = 1
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Red_Normal_Type_18"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Red_Normal_Type_18/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Red_Normal_Type_18/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Red_Normal_Type_18/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6
            asset inputs:normalmap_texture = @./CarSharedNormals_type_18_normal.dds@
            color3f inputs:transmittance_color = (0.96525097, 0.20317739, 0.029814692)
            float inputs:transmittance_measurement_distance = 0.003
            asset inputs:transmittance_texture = @@
            bool inputs:use_diffuse_layer = 1
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Orange"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Orange/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Orange/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Orange/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.5999999
            color3f inputs:transmittance_color = (0.97, 0.97, 0.97)
            float inputs:transmittance_measurement_distance = 0.006
            asset inputs:transmittance_texture = @./glass_orange_albedo.dds@
            bool inputs:use_diffuse_layer = 1
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Orange_Normal_Type_02"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Orange_Normal_Type_02/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Orange_Normal_Type_02/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Orange_Normal_Type_02/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6
            asset inputs:normalmap_texture = @./CarSharedNormals_Type_02_normal.dds@
            color3f inputs:transmittance_color = (0.9498069, 0.60255444, 0.12468506)
            float inputs:transmittance_measurement_distance = 0.006
            asset inputs:transmittance_texture = @@
            bool inputs:use_diffuse_layer = 1
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Orange_Normal_Type_04"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Orange_Normal_Type_04/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Orange_Normal_Type_04/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Orange_Normal_Type_04/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6
            asset inputs:normalmap_texture = @./CarSharedNormals_type_04_normal.dds@
            color3f inputs:transmittance_color = (0.9498069, 0.60255444, 0.12468506)
            float inputs:transmittance_measurement_distance = 0.006
            asset inputs:transmittance_texture = @@
            bool inputs:use_diffuse_layer = 1
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Yellow"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Yellow/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Yellow/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Yellow/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.5999999
            color3f inputs:transmittance_color = (0.97, 0.97, 0.97)
            float inputs:transmittance_measurement_distance = 0.006
            asset inputs:transmittance_texture = @./glass_yellow_albedo.dds@
            bool inputs:use_diffuse_layer = 1
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Yellow_Normal_Type_02"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Yellow_Normal_Type_02/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Yellow_Normal_Type_02/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Yellow_Normal_Type_02/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6
            asset inputs:normalmap_texture = @./CarSharedNormals_Type_02_normal.dds@
            color3f inputs:transmittance_color = (0.9498069, 0.60255444, 0.12468506)
            float inputs:transmittance_measurement_distance = 0.006
            asset inputs:transmittance_texture = @@
            bool inputs:use_diffuse_layer = 1
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "Glass_Yellow_Normal_Type_04"
    {
        token outputs:mdl:displacement.connect = </Looks/Glass_Yellow_Normal_Type_04/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/Glass_Yellow_Normal_Type_04/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/Glass_Yellow_Normal_Type_04/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../02_materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.6
            asset inputs:normalmap_texture = @./CarSharedNormals_type_04_normal.dds@
            color3f inputs:transmittance_color = (0.9498069, 0.60255444, 0.12468506)
            float inputs:transmittance_measurement_distance = 0.006
            asset inputs:transmittance_texture = @@
            bool inputs:use_diffuse_layer = 1
            token outputs:out (
                renderType = "material"
            )
        }
    }
}

