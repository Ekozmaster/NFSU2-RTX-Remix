#usda 1.0

over "RootNode"
{
    over "Looks"
    {
        def Material "rubber" (
            references = @../../../rubber.usda@</Looks/rubber>
        )
        {
            token outputs:mdl:displacement.connect = </RootNode/Looks/rubber/Shader.outputs:out>
            token outputs:mdl:surface.connect = </RootNode/Looks/rubber/Shader.outputs:out>
            token outputs:mdl:volume.connect = </RootNode/Looks/rubber/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @../../../AperturePBR_Opacity.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
                asset inputs:diffuse_texture = @./rubber_albedo.dds@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./rubber_normal.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./rubber_rough.dds@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }
    }
}

