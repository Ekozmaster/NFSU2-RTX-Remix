#usda 1.0
(
    upAxis = "Z"
)

over "Looks" (
    prepend apiSchemas = ["MaterialBindingAPI"]
)
{
    rel material:binding = </Looks/decalsSet01_opaqueMat> (
        bindMaterialAs = "weakerThanDescendants"
    )

    def Material "vegetationSet01_opaqueMat"
    {
        token outputs:mdl:displacement.connect = </Looks/vegetationSet01_opaqueMat/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/vegetationSet01_opaqueMat/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/vegetationSet01_opaqueMat/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../../AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            int inputs:alpha_test_type = 5 (
                customData = {
                    int default = 0
                }
                displayGroup = "Material Flags"
                displayName = "Alpha Test Type"
                doc = """The alpha state alpha test type to use.
This parameter is unused.
"""
                hidden = false
                renderType = "AlphaTestType"
                sdrMetadata = {
                    string __SDR__enum_value = "Always"
                    string options = "Always:0|Never:1|Less:2|Equal:3|LessOrEqual:4|Greater:5|NotEqual:6|GreaterOrEqual:7"
                }
            )
            bool inputs:blend_enabled = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Material Flags"
                displayName = "Blend Enabled"
                doc = """Indicates if alpha state blending should be enabled.

"""
                hidden = false
            )
            asset inputs:diffuse_texture = @./grassSharedTexture01_Base_color.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Map"
                doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                hidden = false
                renderType = "texture_2d"
            )
            asset inputs:normalmap_texture = @./grassSharedTexture01_Normal.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:reflection_roughness_constant = 0 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = """Higher roughness values lead to more blurry reflections

"""
                hidden = false
            )
            asset inputs:reflectionroughness_texture = @./grassSharedTexture01_Roughness.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Specular"
                displayName = "Roughness Map"
                hidden = false
                renderType = "texture_2d"
            )
            bool inputs:use_legacy_alpha_state = 0 (
                customData = {
                    bool default = 1
                }
                displayGroup = "Material Flags"
                displayName = "Use Legacy Alpha State"
                doc = """Indicates if the alpha state should be derived from legacy information (the drawcall), or specified in the MDL.

"""
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }
}

