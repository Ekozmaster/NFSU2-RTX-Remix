#usda 1.0
(
    upAxis = "Z"
)

over "Looks"
{
    def Material "signalRoadLight_material01"
    {
        token outputs:mdl:displacement.connect = </Looks/signalRoadLight_material01/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/signalRoadLight_material01/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/signalRoadLight_material01/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../../AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.47876447, 0.47875968, 0.47875968) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Base Color"
                doc = """The base albedo color to use if no texture is specified

"""
                hidden = false
                renderType = "color"
            )
            asset inputs:diffuse_texture = @./signalRoadLight_material01_Base_color.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Map"
                doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:metallic_constant = 0 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Metallic Amount"
                doc = """Metallic Material

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            asset inputs:reflectionroughness_texture = @./signalRoadLight_material01_Roughness.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Specular"
                displayName = "Roughness Map"
                hidden = false
                renderType = "texture_2d"
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "materialShared_metalPaintedOld01_material01"
    {
        token outputs:mdl:displacement.connect = </Looks/materialShared_metalPaintedOld01_material01/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/materialShared_metalPaintedOld01_material01/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/materialShared_metalPaintedOld01_material01/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../../../AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:diffuse_color_constant = (0.47876447, 0.47875968, 0.47875968) (
                customData = {
                    float3 default = (0.2, 0.2, 0.2)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Base Color"
                doc = """The base albedo color to use if no texture is specified

"""
                hidden = false
                renderType = "color"
            )
            asset inputs:diffuse_texture = @./materialShared_metalPaintedOld01_Base_color.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Diffuse"
                displayName = "Albedo Map"
                doc = """The texture specifying the albedo value and the optional opacity value to use in the alpha channel

"""
                hidden = false
                renderType = "texture_2d"
            )
            float inputs:metallic_constant = 0 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Metallic Amount"
                doc = """Metallic Material

"""
                hidden = false
            )
            asset inputs:normalmap_texture = @./materialShared_metalPaintedOld01_Normal.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Normal"
                displayName = "Normal Map"
                hidden = false
                renderType = "texture_2d"
            )
            asset inputs:reflectionroughness_texture = @./materialShared_metalPaintedOld01_Roughness.dds@ (
                colorSpace = "auto"
                customData = {
                    asset default = @@
                }
                displayGroup = "Specular"
                displayName = "Roughness Map"
                hidden = false
                renderType = "texture_2d"
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }
}

